<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Robocloud.Secrets" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:06Z" specversion="4" source="./RPA/Robocloud/Secrets.py" lineno="14">
<version/>
<doc>`Vault` is a library for interacting with secrets stored in the `Robocorp
Control Room Vault`_ (by default) or file-based secrets, which can be taken
into use by setting some environment variables.

Robocorp Vault relies on environment variables, which are normally set
automatically by the Robocorp Work Agent or Assistant when a run is
initialized by the Robocorp Control Room. When developing robots locally
in VSCode, you can use the `Robocorp Code Extension`_ to set these
variables automatically as well.

Alternatively, you may set these environment variable manually using
`rcc`_ or directly in some other fashion. The specific variables which
must exist are:

- ``RC_API_SECRET_HOST``: URL to Robocorp Vault API
- ``RC_API_SECRET_TOKEN``: API Token for Robocorp Vault API
- ``RC_WORKSPACE_ID``: Control Room Workspace ID

.. _Robocorp Control Room Vault: https://robocorp.com/docs/development-guide/variables-and-secrets/vault
.. _Robocorp Code Extension: https://robocorp.com/docs/developer-tools/visual-studio-code/extension-features#connecting-to-control-room-vault
.. _rcc: https://robocorp.com/docs/rcc/workflow

File-based secrets can be set by defining two environment variables.

- ``RPA_SECRET_MANAGER``: RPA.Robocorp.Vault.FileSecrets
- ``RPA_SECRET_FILE``: Absolute path to the secrets database file

Example content of local secrets file:

.. code-block:: json

    {
        "swaglabs": {
            "username": "standard_user",
            "password": "secret_sauce"
        }
    }

OR

.. code-block:: YAML

    swaglabs:
        username: standard_user
        password: secret_sauce

**Examples of Using Secrets in a Robot**

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library    Collections
    Library    RPA.Robocorp.Vault

    *** Tasks ***
    Reading secrets
        ${secret}=    Get Secret  swaglabs
        Log Many      ${secret}

    Modifying secrets
        ${secret}=          Get Secret      swaglabs
        ${level}=           Set Log Level   NONE
        Set To Dictionary   ${secret}       username    nobody
        Set Log Level       ${level}
        Set Secret          ${secret}


**Python**

.. code-block:: python

    from RPA.Robocorp.Vault import Vault

    VAULT = Vault()

    def reading_secrets():
        print(f"My secrets: {VAULT.get_secret('swaglabs')}")

    def modifying_secrets():
        secret = VAULT.get_secret("swaglabs")
        secret["username"] = "nobody"
        VAULT.set_secret(secret)</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="17">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>The selected adapter can be set with the environment variable
``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``.
Defaults to Robocorp Vault if not defined.

All other library arguments are passed to the adapter.

:param default_adapter: Override default secret adapter</doc>
<shortdoc>The selected adapter can be set with the environment variable ``RPA_SECRET_MANAGER``, or the keyword argument ``default_adapter``. Defaults to Robocorp Vault if not defined.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Get Secret" source="./RPA/Robocorp/Vault.py" lineno="563">
<arguments repr="secret_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="secret_name: str">
<name>secret_name</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Read a secret from the configured source, e.g. Robocorp Vault,
and return it as a ``Secret`` object.

:param secret_name: Name of secret</doc>
<shortdoc>Read a secret from the configured source, e.g. Robocorp Vault, and return it as a ``Secret`` object.</shortdoc>
</kw>
<kw name="Set Secret" source="./RPA/Robocorp/Vault.py" lineno="571">
<arguments repr="secret: Secret">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="secret: Secret">
<name>secret</name>
<type typedoc="dictionary">Secret</type>
</arg>
</arguments>
<doc>Overwrite an existing secret with new values.

Note: Only allows modifying existing secrets, and replaces
      all values contained within it.

:param secret: Secret as a ``Secret`` object, from e.g. ``Get Secret``</doc>
<shortdoc>Overwrite an existing secret with new values.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Set Secret</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Get Secret</usage>
</usages>
</type>
</typedocs>
</keywordspec>
