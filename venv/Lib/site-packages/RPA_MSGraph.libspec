<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.MSGraph" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:06Z" specversion="4" source="./RPA/MSGraph.py" lineno="61">
<version/>
<doc>The *MSGraph* library wraps the `O365 package`_, giving robots
the ability to access the Microsoft Graph API programmatically.

OAuth Configuration
-------------------

Graph's API primarily authenticates via the OAuth 2.0 authorization code grant
flow or OpenID Connect. This library exposes the OAuth 2.0 flow for robots to
authenticate on behalf of users. A user must complete an initial authentication
flow with the help of our `OAuth Graph Example Bot`_.

For best results, `register an app`_ in Azure AD and configure it as so:

- The type is "Web App".
- Redirect URI should be ``https://login.microsoftonline.com/common/oauth2/nativeclient``
- The app should be a multi-tenant app.
- ``Accounts in any organizational directory`` is checked.
- Has relevant permissions enabled, check the `Microsoft Graph permissions reference`_
  for a list of permissions available to MS Graph apps.

.. _O365 package: https://pypi.org/project/O365
.. _OAuth Graph Example Bot: https://robocorp.com/portal/
.. _register an app: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade
.. _Microsoft Graph permissions reference: https://docs.microsoft.com/en-us/graph/permissions-reference</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="94">
<arguments repr="client_id: str | None = None, client_secret: str | None = None, token: Token | None = None, refresh_token: str | None = None, redirect_uri: str | None = None, vault_backend: bool = False, vault_secret: str | None = None, file_backend_path: Path | None = /temp">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="client_id: str | None = None">
<name>client_id</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="client_secret: str | None = None">
<name>client_secret</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="token: Token | None = None">
<name>token</name>
<type typedoc="dictionary">Token</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="refresh_token: str | None = None">
<name>refresh_token</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="redirect_uri: str | None = None">
<name>redirect_uri</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="vault_backend: bool = False">
<name>vault_backend</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="vault_secret: str | None = None">
<name>vault_secret</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="file_backend_path: Path | None = /temp">
<name>file_backend_path</name>
<type>Path</type>
<type typedoc="None">None</type>
<default>/temp</default>
</arg>
</arguments>
<doc>When importing the library to Robot Framework, you can set the
``client_id`` and ``client_secret``.

:param client_id: Application client ID.
:param client_secret: Application client secret.
:param token: Not implemented. Will support providing the
 authorization token object directly.
:param refresh_token: Authorization refresh token obtained from
 prior OAuth flows.
:param redirect_uri: Must be provided with client ID and client
 secret if not using the default.
:param vault_backend: Not implemented. Will support using the
 Control Room vault directly for authorization token management.
:param vault_secret: Not implemented. Will support using the
 Control Room vault directly for authorization token management.
:param file_backend_path: Indicate a path where the tokens will
 be stored within the robot, the default is ``/temp``.</doc>
<shortdoc>When importing the library to Robot Framework, you can set the ``client_id`` and ``client_secret``.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Authorize And Get Token" lineno="464">
<arguments repr="authorization_url: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="authorization_url: str">
<name>authorization_url</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Exchanges the OAuth authorization URL obtained from
\`Generate OAuth Authorization URL\` for an access token. This
library maintains the user access token for current requests
and returns the refresh token to be stored in a secure location
(e.g., the Robocorp Control Room Vault).

:param authorization_url: The full URL retrieved by the user
 after completing authorization to Microsoft.
:return: A refresh token which should be stored securely for
 future sessions.</doc>
<shortdoc>Exchanges the OAuth authorization URL obtained from \`Generate OAuth Authorization URL\` for an access token. This library maintains the user access token for current requests and returns the refresh token to be stored in a secure location (e.g., the Robocorp Control Room Vault).</shortdoc>
</kw>
<kw name="Configure Msgraph Client" lineno="345">
<arguments repr="client_id: str, client_secret: str, refresh_token: str | None = None, redirect_uri: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="client_id: str">
<name>client_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="client_secret: str">
<name>client_secret</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="refresh_token: str | None = None">
<name>refresh_token</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="redirect_uri: str | None = None">
<name>redirect_uri</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Configures the MS Graph client. If a refresh token is
known, it can be provided to obtain a current user token
to authenticate with. A new refresh token is returned
if one is provided.

:param client_id: Application client ID.
:param client_secret: Application client secret.
:param refresh_token: Authorization refresh token obtained from
 prior OAuth flows.
:param redirect_uri: Must be provided with client ID and client
 secret if not using the default.
:return: A new refresh token if one was provided, or ``None``.</doc>
<shortdoc>Configures the MS Graph client. If a refresh token is known, it can be provided to obtain a current user token to authenticate with. A new refresh token is returned if one is provided.</shortdoc>
</kw>
<kw name="Create Sharepoint List" lineno="919">
<arguments repr="list_data: dict, site: Site">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_data: dict">
<name>list_data</name>
<type typedoc="dictionary">dict</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="site: Site">
<name>site</name>
<type>Site</type>
</arg>
</arguments>
<doc>Creates a sharepoint list and returns the instance.

:param list_data: Dictionary with the data for the new list.
:param site: Site instance obtained from \`Get Sharepoint Site\`.
:return: SharePoint List that was created.

``SharepointList`` objects have additional properties that can be accessed
with dot-notation, see examples below.

.. code-block: robotframework

    *** Tasks ***
    Create list
        ${list}=    Create Sharepoint List
        ...    ${list_data}
        ...    ${site}
        Log    ${list.object_id}
        Log    ${list.name}
        Log    ${list.display_name}
        Log    ${list.description}
        Log    ${list.column_name_cw}
        Log    ${list.created_by}
        Log    ${list.created}
        Log    ${list.last_modified_by}
        Log    ${list.modified}
        Log    ${list.web_url}</doc>
<shortdoc>Creates a sharepoint list and returns the instance.</shortdoc>
</kw>
<kw name="Download File From Onedrive" lineno="629">
<arguments repr="target_file: File | str, to_path: str | Path | None = None, name: str | None = None, resource: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target_file: File | str">
<name>target_file</name>
<type>File</type>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="to_path: str | Path | None = None">
<name>to_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name: str | None = None">
<name>name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Downloads a file from Onedrive.

The downloaded file will be saved to a local path.

:param target_file: ``DriveItem`` or file path of the desired file.
:param to_path: Destination folder of the downloaded file,
 defaults to the current directory.
:param name: New name for the downloaded file, with or without extension.
:param resource: Name of the resource if not using default.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:return: Path to the downloaded file.

.. code-block: robotframework

    *** Tasks ***
    Download file with path
        ${download_path}=    Download File From Onedrive
        ...    /path/to/onedrive/file
        ...    /path/to/local/folder
        ...    Report.pdf

    Download file with object
        ${download_path}=    Download File From Onedrive
        ...    ${drive_item}
        ...    /path/to/local/folder
        ...    Report.pdf</doc>
<shortdoc>Downloads a file from Onedrive.</shortdoc>
</kw>
<kw name="Download File From Share Link" lineno="757">
<arguments repr="share_url: str, to_path: str | Path | None = None, name: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="share_url: str">
<name>share_url</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="to_path: str | Path | None = None">
<name>to_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name: str | None = None">
<name>name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Downloads file from the share link.

The downloaded file will be saved to a local path.

:param share_url: URL of the shared file
:param to_path: Destination folder of the downloaded file,
 defaults to the current directory.
:param name: New name for the downloaded file, with or without extension.
:return: The Path to the downloaded file.

.. code-block: robotframework

    *** Tasks ***
    Download file
        ${download_path}=    Download File From Share Link
        ...    https://...
        ...    /path/to/local/folder
        ...    Report.pdf</doc>
<shortdoc>Downloads file from the share link.</shortdoc>
</kw>
<kw name="Download File From Sharepoint" lineno="1025">
<arguments repr="target_file: File | str, site: Site, to_path: str | Path | None = None, name: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target_file: File | str">
<name>target_file</name>
<type>File</type>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="site: Site">
<name>site</name>
<type>Site</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="to_path: str | Path | None = None">
<name>to_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name: str | None = None">
<name>name</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Downloads file from SharePoint.

The downloaded file will be saved to a local folder.

:param target_file: ``DriveItem`` or file path of the desired file.
:param site: Site instance obtained from \`Get Sharepoint Site\`.
:param to_path: Destination folder of the downloaded file,
 defaults to the current directory.
:param name: New name for the downloaded file, with or without extension.
:param drive: A ``Drive`` object or a Drive ID as a string.
:return: Path to the downloaded file.

.. code-block: robotframework

    *** Tasks ***
    Download file
        ${download_path}=    Download File From Sharepoint
        ...    /path/to/sharepoint/file
        ...    ${site}
        ...    /path/to/local/folder
        ...    Report.pdf

    Download file with object
        ${download_path}=    Download File From Onedrive
        ...    ${drive_item}
        ...    ${site}
        ...    /path/to/local/folder
        ...    Report.pdf</doc>
<shortdoc>Downloads file from SharePoint.</shortdoc>
</kw>
<kw name="Download Folder From Onedrive" lineno="671">
<arguments repr="target_folder: Folder | str, to_path: str | Path | None = None, resource: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="target_folder: Folder | str">
<name>target_folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="to_path: str | Path | None = None">
<name>to_path</name>
<type typedoc="string">str</type>
<type>Path</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Downloads a folder from OneDrive with all of its contents,
including subfolders.

Caution when downloading big folder structures. The downloaded
folder will be saved to a local path.

:param target_folder: ``DriveItem`` or path of the desired folder.
:param to_path: Destination folder where the download will be saved to,
 defaults to the current directory.
:param resource: Name of the resource if not using default.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:return: Path to the downloaded folder.

.. code-block: robotframework

    *** Tasks ***
    Download folder with path
        ${download_path}=    Download Folder From Onedrive
        ...    /path/to/onedrive/folder
        ...    /path/to/local/folder

    Download folder with object
        ${download_path}=    Download Folder From Onedrive
        ...    ${drive_item}
        ...    /path/to/local/folder</doc>
<shortdoc>Downloads a folder from OneDrive with all of its contents, including subfolders.</shortdoc>
</kw>
<kw name="Find Onedrive File" lineno="711">
<arguments repr="search_string: str, target_folder: Folder | str | None = None, include_folders: bool | None = False, resource: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="search_string: str">
<name>search_string</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="target_folder: Folder | str | None = None">
<name>target_folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include_folders: bool | None = False">
<name>include_folders</name>
<type typedoc="boolean">bool</type>
<type typedoc="None">None</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns a list of files found in OneDrive based on the search string.
If a folder is not specified, the search is done in the entire drive and
may include items that were shared with the user. It is possible to pass
\`root\` as the target folder in order to avoid this behavior.

The files returned are ``DriveItem`` objects and they have additional
properties that can be accessed with dot-notation, see
\`List Files In Onedrive Folder\` for details.

:param search_string: String used to search for file in Onedrive.
 Values may be matched across several fields including filename,
 metadata, and file content.
:param target_folder: Folder where to search for files.
:param include_folders: Boolean indicating if should return folders as well.
:param resource: Name of the resource if not using default.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:return: List of DriveItems found based on the search string.

.. code-block: robotframework

    *** Tasks ***
    Find file
        ${files}=    Find Onedrive File    Report.xlsx</doc>
<shortdoc>Returns a list of files found in OneDrive based on the search string. If a folder is not specified, the search is done in the entire drive and may include items that were shared with the user. It is possible to pass \`root\` as the target folder in order to avoid this behavior.</shortdoc>
</kw>
<kw name="Generate Oauth Authorization Url" lineno="424">
<arguments repr="client_id: str | None = None, client_secret: str | None = None, redirect_uri: str | None = None, scopes: list | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="client_id: str | None = None">
<name>client_id</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="client_secret: str | None = None">
<name>client_secret</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="redirect_uri: str | None = None">
<name>redirect_uri</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="scopes: list | None = None">
<name>scopes</name>
<type typedoc="list">list</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Generates an authorization URL which must be opened
by the user to complete the OAuth flow. If no scopes
are provided, the default scope is used which is all
scopes defined in the \`Get Scopes\` keyword.

:param client_id: Application client ID.
:param client_secret: Application client secret.
:param redirect_uri: Can be provided with client ID and client
 secret if not using the default.
:param scopes: A list of scopes in the form required by the
 API. Use the helper function \`Get scopes\`.
:return: The URL the user must follow to complete their portion
 of the OAuth flow.</doc>
<shortdoc>Generates an authorization URL which must be opened by the user to complete the OAuth flow. If no scopes are provided, the default scope is used which is all scopes defined in the \`Get Scopes\` keyword.</shortdoc>
</kw>
<kw name="Get Drive Instance" lineno="170">
<arguments repr="resource: str | None = None, drive_id: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive_id: str | None = None">
<name>drive_id</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns the specified drive from the specified resource. If
either is not provided, defaults are returned.

:param resource: Name of the resource if not using default.
:param drive_id: The Drive ID as a string.
:return: The requested ``Drive`` object.

.. code-block: robotframework

    *** Tasks ***
    Get default drive
        ${default_drive}=    Get drive instance
        Log    ${default_drive.Name}</doc>
<shortdoc>Returns the specified drive from the specified resource. If either is not provided, defaults are returned.</shortdoc>
</kw>
<kw name="Get File Instance" lineno="246">
<arguments repr="drive: Drive | str, file: File | str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="drive: Drive | str">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="file: File | str">
<name>file</name>
<type>File</type>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Returns a ``File`` object from the provided drive. If a ``File``
object is provided, it is reobtained from the API.

:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:param file_path: A ``File`` object or path as a string.

.. code-block: robotframework

    *** Tasks ***
    Get file from OneDrive
        ${folder}=    Get file instance    /path/to/file</doc>
<shortdoc>Returns a ``File`` object from the provided drive. If a ``File`` object is provided, it is reobtained from the API.</shortdoc>
</kw>
<kw name="Get Folder Instance" lineno="217">
<arguments repr="drive: Drive | str | None = None, folder: Folder | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="folder: Folder | str | None = None">
<name>folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns a folder object from the provided drive. If a folder
object is provided, it is reobtained from the API.

:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:param folder: A ``Folder`` object or folder path as a string.

.. code-block: robotframework

    *** Tasks ***
    Get folder from OneDrive
        ${folder}=    Get folder instance    /path/to/folder</doc>
<shortdoc>Returns a folder object from the provided drive. If a folder object is provided, it is reobtained from the API.</shortdoc>
</kw>
<kw name="Get Items From Sharepoint List" lineno="892">
<arguments repr="list_name: str, site: Site">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="list_name: str">
<name>list_name</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="site: Site">
<name>site</name>
<type>Site</type>
</arg>
</arguments>
<doc>Returns the items on a SharePoint list as a table. The list
is found by it's display name.

:param list_name: Display name of the SharePoint list.
:param site: Site instance obtained from \`Get Sharepoint Site\`.
:return: Table or list of dicts of the items.

.. code-block: robotframework

    *** Tasks ***
    Get List
        ${table}=    Get Items From Sharepoint List    My List    ${site}</doc>
<shortdoc>Returns the items on a SharePoint list as a table. The list is found by it's display name.</shortdoc>
</kw>
<kw name="Get Me" lineno="512">
<arguments repr="">
</arguments>
<doc>Returns the MS Graph object representing the currently logged
in user. A ``User`` object is returned. Properties of the user can
be accessed like so:

.. code-block: robotframework

    *** Tasks ***
    Get the me user object
        ${me}=    Get Me
        Log    ${me.full_name}
        Log    ${me.display_name}
        Log    ${me.given_name}
        Log    ${me.surname}
        Log    ${me.full_name}
        Log    ${me.mail}
        Log    ${me.business_phones}
        Log    ${me.mobile_phone}
        Log    ${me.about_me}
        Log    ${me.interests}
        Log    ${me.job_title}
        Log    ${me.object_id}
        Log    ${me.user_principal_name}</doc>
<shortdoc>Returns the MS Graph object representing the currently logged in user. A ``User`` object is returned. Properties of the user can be accessed like so:</shortdoc>
</kw>
<kw name="Get Scopes" lineno="376">
<arguments repr="*scopes: str">
<arg kind="VAR_POSITIONAL" required="false" repr="*scopes: str">
<name>scopes</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Returns the proper scope definitions based on the
provided "scope helpers", which are enumerated below.
You can pass none to get all scopes. Basic is included
in all other scopes. The provided object can be passed
to the ``scopes`` parameter when calling
\`Generate OAuth Authorization URL\`.

* ``basic``
* ``mailbox``
* ``mailbox_shared``
* ``message_send``
* ``message_send_shared``
* ``message_all``
* ``message_all_shared``
* ``address_book``
* ``address_book_shared``
* ``address_book_all``
* ``address_book_all_shared``
* ``calendar``
* ``calendar_shared``
* ``calendar_all``
* ``calendar_shared_all``
* ``users``
* ``onedrive``
* ``onedrive_all``
* ``sharepoint``
* ``sharepoint_dl``
* ``settings_all``
* ``tasks``
* ``tasks_all``
* ``presence``

:param scopes: Scopes requested. If left empty, all scopes
 will be returned.
:return: A list of Scopes which can be passed to authorization
 keywords.</doc>
<shortdoc>Returns the proper scope definitions based on the provided "scope helpers", which are enumerated below. You can pass none to get all scopes. Basic is included in all other scopes. The provided object can be passed to the ``scopes`` parameter when calling \`Generate OAuth Authorization URL\`.</shortdoc>
</kw>
<kw name="Get Sharepoint Site" lineno="835">
<arguments repr="*args: str, resource: str | None = ">
<arg kind="VAR_POSITIONAL" required="false" repr="*args: str">
<name>args</name>
<type typedoc="string">str</type>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="resource: str | None = ">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default/>
</arg>
</arguments>
<doc>Returns a SharePoint site.

:param args: The SharePoint site to retrieve, see documentation
 for different methods of defining the site.
:param resource: Name of the resource if not using default.
:return: SharePoint Site instance.

There are multiple ways of retrieving a SharePoint site:

.. code-block: robotframework

    *** Tasks ***
    Get SharePoint site with host name
        [Documentnation]    Use the host_name e.g.
        ...    'contoso.sharepoint.com' or 'root'.
        Get SharePoint site    contoso.sharepoint.com

    Get SharePoint site with site ID
        [Documentnation]    the site_id is a comma separated string
        ...    of (host_name, site_collection_id, site_id).
        Get SharePoint site
        ...    contoso.sharepoint.com, 1234-1234, 5678-5678

    Get SharePoint site with path to Site
        [Documentnation]    host_name e.g. 'contoso.sharepoint.com'
        ...    and path_to_site is a url path (with a leading slash).
        Get SharePoint site    contoso.sharepoint.com
        ...    /path/to/site

    Get SharePoint site with separate ID args
        [Documentnation]    the site ID broken into separate args
        Get SharePoint site    contoso.sharepoint.com
        ...    1234-1234
        ...    5678-5678

The return is of type Site and it has additional properties
that can be accessed with dot-notation. See examples below.

.. code-block: robotframework

    *** Tasks ***
    Get site
        ${site}=    Get Sharepoint Site    contoso.sharepoint.com
        Log    ${site.name}
        Log    ${site.display_name}
        Log    ${site.description}
        Log    ${site.web_url}
        Log    ${site.object_id}</doc>
<shortdoc>Returns a SharePoint site.</shortdoc>
</kw>
<kw name="List Files In Onedrive Folder" lineno="581">
<arguments repr="target_folder: Folder | str | None = None, include_folders: bool | None = False, resource: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="target_folder: Folder | str | None = None">
<name>target_folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include_folders: bool | None = False">
<name>include_folders</name>
<type typedoc="boolean">bool</type>
<type typedoc="None">None</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Returns a list of files from the specified OneDrive folder.

The files returned are ``DriveItem`` objects and they have additional
properties that can be accessed with dot-notation.

:param target_folder: Path of the folder in Onedrive. If none is
 provided, will return files from the root of Onedrive.
:param include_folders: Boolean indicating if should return folders as well.
:param resource: Name of the resource if not using default.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:return: List of DriveItems in the folder.

.. code-block: robotframework

    *** Tasks ***
    List files
        ${files}=    List Files In Onedrive Folder    /path/to/folder
        FOR    ${file}    IN    @{files}
            Log    ${file.name}
            Log    ${file.extension}
            Log    ${file.description}
            Log    ${file.created_by}
            Log    ${file.created}
            Log    ${file.is_file}
            Log    ${file.is_image}
            Log    ${file.is_photo}
            Log    ${file.is_folder}
            Log    ${file.size}
            Log    ${file.web_url}
        END</doc>
<shortdoc>Returns a list of files from the specified OneDrive folder.</shortdoc>
</kw>
<kw name="List Files In Sharepoint Site Drive" lineno="982">
<arguments repr="site: Site, include_folders: bool | None = False, drive: Drive | str | None = None, target_folder: Folder | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="site: Site">
<name>site</name>
<type>Site</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="include_folders: bool | None = False">
<name>include_folders</name>
<type typedoc="boolean">bool</type>
<type typedoc="None">None</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="target_folder: Folder | str | None = None">
<name>target_folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>List files in the SharePoint Site drive.

If the ``drive`` is not set, the default Document Library
will be used. The ``drive`` can be obtained from the keyword
\`List Sharepoint Site Drives\`.

The files returned are ``DriveItem`` objects and they have additional
properties that can be accessed with dot-notation, see
\`List Files In Onedrive Folder\` for details.

:param site: Site instance obtained from \`Get Sharepoint Site\`.
:param include_folders: Boolean indicating if should return folders
 as well.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:param target_folder: Path of the folder in the Sharepoint drive.
 If none is provided, will return files from the root of the drive.
:return: List of DriveItems present in the Site drive.

.. code-block: robotframework

    *** Tasks ***

    List files in SharePoint drive
        ${files}    List Files In Sharepoint Site Drive    ${site}</doc>
<shortdoc>List files in the SharePoint Site drive.</shortdoc>
</kw>
<kw name="List Sharepoint Site Drives" lineno="956">
<arguments repr="site: Site">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="site: Site">
<name>site</name>
<type>Site</type>
</arg>
</arguments>
<doc>Get a list of Drives available in the SharePoint Site.

:param site: Site instance obtained from \`Get Sharepoint Site\`.
:return: List of Drives present in the SharePoint Site.

.. code-block: robotframework

    *** Tasks ***
    List SharePoint drives
        ${drives}    List Sharepoint Site Drives    ${site}
        FOR    ${drive}    IN    @{drives}
            Log    ${drive.name}
            Log    ${drive.description}
            Log    ${drive.owner.display_name}
            Log    ${drive.web_url}
            Log    ${drive.object_id}
        END</doc>
<shortdoc>Get a list of Drives available in the SharePoint Site.</shortdoc>
</kw>
<kw name="Refresh Oauth Token" lineno="489">
<arguments repr="refresh_token: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="refresh_token: str | None = None">
<name>refresh_token</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Refreshes the user token using the provided ``refresh_token``.
The user token is retained in the library and a new
refresh token is returned. If no token is provided, this keyword
assumes the Robocorp Vault is being used as a backend and attempts
to refresh it based on that backend.

:param refresh_token: The refresh token to use to refresh the
 session.
:return: A refresh token which should be stored securely for
 future sessions.</doc>
<shortdoc>Refreshes the user token using the provided ``refresh_token``. The user token is retained in the library and a new refresh token is returned. If no token is provided, this keyword assumes the Robocorp Vault is being used as a backend and attempts to refresh it based on that backend.</shortdoc>
</kw>
<kw name="Search For Users" lineno="540">
<arguments repr="search_string: str, search_field: str = displayName, resource: str = users">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="search_string: str">
<name>search_string</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="search_field: str = displayName">
<name>search_field</name>
<type typedoc="string">str</type>
<default>displayName</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str = users">
<name>resource</name>
<type typedoc="string">str</type>
<default>users</default>
</arg>
</arguments>
<doc>Returns a list of ``User`` objects from the Active Directory
based on the provided search string.

``User`` objects have additional properties that can be accessed
with dot-notation, see \`Get Me\` for additional details.

:param search_string: Text to search for.
:param search_field: Where to search. Defaults to display name.
:param resource: Name of the resource if not using default.

.. code-block: robotframework

    *** Tasks ***
    Search users
        ${users}=    Search For Users    John</doc>
<shortdoc>Returns a list of ``User`` objects from the Active Directory based on the provided search string.</shortdoc>
</kw>
<kw name="Upload File To Onedrive" lineno="800">
<arguments repr="file_path: str, target_folder: Folder | str | None = None, resource: str | None = None, drive: Drive | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="file_path: str">
<name>file_path</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="target_folder: Folder | str | None = None">
<name>target_folder</name>
<type>Folder</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="resource: str | None = None">
<name>resource</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="drive: Drive | str | None = None">
<name>drive</name>
<type>Drive</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Uploads a file to the specified OneDrive folder.

The uploaded file is returned as a ``DriveItem`` object and it has
additional properties that can be accessed with dot-notation, see
\`List Files In Onedrive Folder\` for details.

:param file_path: Path of the local file being uploaded.
:param target_folder: Path of the folder in Onedrive.
:param resource: Name of the resource if not using default.
:param drive: A ``Drive`` object or Drive ID as a string. If not
 provided, will use the default drive.
:return: The newly created DriveItem.

.. code-block: robotframework

    *** Tasks ***
    Upload file
        ${file}=    Upload File To Onedrive
        ...    /path/to/file.txt
        ...    /path/to/folder</doc>
<shortdoc>Uploads a file to the specified OneDrive folder.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Find Onedrive File</usage>
<usage>List Files In Onedrive Folder</usage>
<usage>List Files In Sharepoint Site Drive</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Create Sharepoint List</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Generate Oauth Authorization Url</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Configure Msgraph Client</usage>
<usage>Download File From Onedrive</usage>
<usage>Download File From Share Link</usage>
<usage>Download File From Sharepoint</usage>
<usage>Download Folder From Onedrive</usage>
<usage>Find Onedrive File</usage>
<usage>Generate Oauth Authorization Url</usage>
<usage>Get Drive Instance</usage>
<usage>Get Folder Instance</usage>
<usage>Get Sharepoint Site</usage>
<usage>List Files In Onedrive Folder</usage>
<usage>List Files In Sharepoint Site Drive</usage>
<usage>Refresh Oauth Token</usage>
<usage>Upload File To Onedrive</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Authorize And Get Token</usage>
<usage>Configure Msgraph Client</usage>
<usage>Download File From Onedrive</usage>
<usage>Download File From Share Link</usage>
<usage>Download File From Sharepoint</usage>
<usage>Download Folder From Onedrive</usage>
<usage>Find Onedrive File</usage>
<usage>Generate Oauth Authorization Url</usage>
<usage>Get Drive Instance</usage>
<usage>Get File Instance</usage>
<usage>Get Folder Instance</usage>
<usage>Get Items From Sharepoint List</usage>
<usage>Get Scopes</usage>
<usage>Get Sharepoint Site</usage>
<usage>List Files In Onedrive Folder</usage>
<usage>List Files In Sharepoint Site Drive</usage>
<usage>Refresh Oauth Token</usage>
<usage>Search For Users</usage>
<usage>Upload File To Onedrive</usage>
</usages>
</type>
</typedocs>
</keywordspec>
