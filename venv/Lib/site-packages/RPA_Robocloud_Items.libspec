<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Robocloud.Items" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:06Z" specversion="4" source="./RPA/Robocloud/Items.py" lineno="13">
<version/>
<doc>A library for interacting with Control Room work items.

Work items are used for managing data that go through multiple
steps and tasks inside a process. Each step of a process receives
input work items from the previous step, and creates output work items for
the next step.

**Item structure**

A work item's data payload is JSON and allows storing anything that is
serializable. This library by default interacts with payloads that
are a dictionary of key-value pairs, which it treats as individual
variables. These variables can be exposed to the Robot Framework task
to be used directly.

In addition to the data section, a work item can also contain files,
which are stored by default in Robocorp Control Room. Adding and using
files with work items requires no additional setup from the user.

**Loading inputs**

The library automatically loads the first input work item, if the
library input argument ``autoload`` is truthy (default).

After an input has been loaded its payload and files can be accessed
through corresponding keywords, and optionally these values can be modified.

**E-mail triggering**

Since a process can be started in Control Room by sending an e-mail, a body
in Text/JSON/YAML/HTML format can be sent as well and this gets attached to the
input work item with the ``rawEmail`` payload variable. This library automatically
parses the content of it and saves into ``parsedEmail`` the dictionary
transformation of the original e-mail.

If "Parse email" Control Room configuration option is enabled (recommended), then
your e-mail is automatically parsed in the work item under the ``email`` payload
variable, which is a dictionary containing a ``body`` holding the final parsed form
of the interpreted e-mail body. The payload variable ``parsedEmail`` is still
available for backwards compatibility reasons and holds the very same body inside
the ``parsedEmail[Body]``.

E-mail attachments will be added into the work item as files. Read more on:
https://robocorp.com/docs/control-room/attended-or-unattended/email-trigger

Example:

After starting the process by sending an e-mail with a body like:

.. code-block:: json

    {
        "message": "Hello world!"
    }

The robot can use the parsed e-mail body's dictionary:

.. code-block:: robotframework

    *** Tasks ***
    Using Prased Emails
        ${mail} =    Get Work Item Variable    email
        Set Work Item Variables    &amp;{mail}[body]
        ${message} =     Get Work Item Variable     message
        Log    ${message}    # will print "Hello world!"

The behaviour can be disabled by loading the library with
``auto_parse_email=${None}`` or altered by providing to it a dictionary with one
"key: value" where the key is usually "email.text" (deprecated "rawEmail", the
variable set by Control Room, which acts as source for the parsed (deprecated raw)
e-mail data) and the value can be "email.body" (deprecated "parsedEmail", where the
parsed e-mail data gets stored into), value which can be customized and retrieved
with ``Get Work Item Variable``.

**Creating outputs**

It's possible to create multiple new work items as an output from a
task. With the keyword ``Create Output Work Item`` a new empty item
is created as a child for the currently loaded input.

All created output items are sent into the input queue of the next
step in the process.

**Active work item**

Keywords that read or write from a work item always operate on the currently
active work item. Usually that is the input item that has been automatically
loaded when the execution started, but the currently active item is changed
whenever the keywords ``Create Output Work Item`` or ``Get Input Work Item``
are called. It's also possible to change the active item manually with the
keyword ``Set current work item``.

**Saving changes**

While a work item is loaded automatically when a suite starts, changes are
not automatically reflected back to the source. The work item will be modified
locally and then saved when the keyword ``Save Work Item`` is called.
This also applies to created output work items.

It is recommended to defer saves until all changes have been made to prevent
leaving work items in a half-modified state in case of failures.

**Local Development**

While Control Room is the default implementation, it can also be replaced
with a custom adapter. The selection is based on either the ``default_adapter``
argument for the library, or the ``RPA_WORKITEMS_ADAPTER`` environment
variable. The library has a built-in alternative adapter called FileAdapter for
storing work items to disk.

The FileAdapter uses a local JSON file for input work items.
It's a list of work items, each of which has a data payload and files.

An example of a local file with one work item:

.. code-block:: json

    [
        {
            "payload": {
                "variable1": "a-string-value",
                "variable2": ["a", "list", "value"]
            },
            "files": {
                "file1": "path/to/file.ext"
            }
        }
    ]

Output work items (if any) are saved to an adjacent file
with the same name, but with the extension ``.output.json``. You can specify
through the "RPA_OUTPUT_WORKITEM_PATH" env var a different path and name for this
file.

**Simulating the Cloud with Robocorp Code VSCode Extension**

If you are developing in VSCode with the `Robocorp Code extension`_, you can
utilize the built in local development features described in the
`Developing with work items locally`_ section of the
`Using work items`_ development guide.

.. _Robocorp Code extension: https://robocorp.com/docs/setup/development-environment#visual-studio-code-with-robocorp-extensions
.. _Developing with work items locally: https://robocorp.com/docs/development-guide/control-room/work-items#developing-with-work-items-locally
.. _Using work items: https://robocorp.com/docs/development-guide/control-room/work-items

**Examples**

**Robot Framework**

In the following example a task creates an output work item,
and attaches some variables to it.

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Robocorp.WorkItems

    *** Tasks ***
    Save variables to Control Room
        Create Output Work Item
        Set work item variables    user=Dude    mail=address@company.com
        Save Work Item

In the next step of the process inside a different robot, we can use
previously saved work item variables. Also note how the input work item is
loaded implicitly when the suite starts.

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Robocorp.WorkItems

    *** Tasks ***
    Use variables from Control Room
        Set task variables from work item
        Log    Variables are now available: s${user}, ${mail}

**Python**

The library can also be used through Python, but it does not implicitly
load the first work item.

.. code-block:: python

    import logging
    from RPA.Robocorp.WorkItems import WorkItems

    def list_variables(item_id):
        library = WorkItems()
        library.get_input_work_item()

        variables = library.get_work_item_variables()
        for variable, value in variables.items():
            logging.info("%s = %s", variable, value)</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="16">
<arguments repr="*args, **kwargs">
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Initialize self.  See help(type(self)) for accurate signature.</doc>
<shortdoc>Initialize self.  See help(type(self)) for accurate signature.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add Work Item File" source="./RPA/Robocorp/WorkItems.py" lineno="1583">
<arguments repr="path, name=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path">
<name>path</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="name=None">
<name>name</name>
<default>None</default>
</arg>
</arguments>
<doc>Add given file to work item.

:param path: Path to file on disk
:param name: Destination name for file. If not given, current name
             of local file is used.

**NOTE**: Files are not uploaded before work item is saved

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Add work item file    output.xls
        Save Work Item</doc>
<shortdoc>Add given file to work item.</shortdoc>
</kw>
<kw name="Add Work Item Files" source="./RPA/Robocorp/WorkItems.py" lineno="1657">
<arguments repr="pattern">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pattern">
<name>pattern</name>
</arg>
</arguments>
<doc>Add all files that match given pattern to work item.

:param pattern: Path wildcard pattern

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Add work item files    %{ROBOT_ROOT}/generated/*.csv
        Save Work Item</doc>
<shortdoc>Add all files that match given pattern to work item.</shortdoc>
</kw>
<kw name="Clear Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1294">
<arguments repr="">
</arguments>
<doc>Remove all data and files in the current work item.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Clearing a work item
        Clear work item
        Save work item

.. code-block:: python

    from RPA.Robocorp.WorkItems import WorkItems

    wi = WorkItems()
    wi.get_input_work_item()
    wi.clear_work_item()
    wi.save_work_item()</doc>
<shortdoc>Remove all data and files in the current work item.</shortdoc>
</kw>
<kw name="Create Output Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1196">
<arguments repr="variables: dict | None = None, files: List[str] | str | None = None, save: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="variables: dict | None = None">
<name>variables</name>
<type typedoc="dictionary">dict</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="files: List[str] | str | None = None">
<name>files</name>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="save: bool = False">
<name>save</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Create a new output work item with optional variables and files.

An output work item is always created as a child for an input item, therefore
a non-released input is required to be loaded first.
All changes to the work item are done locally and are sent to the output queue
after the keyword ``Save Work Item`` is called only, except when `save` is
`True`.

:param variables: Optional dictionary with variables to be set into the new
    output work item.
:param files: Optional list or comma separated paths to files to be included
    into the new output work item.
:param save: Automatically call ``Save Work Item`` over the newly created
    output work item.
:returns: The newly created output work item object.

**Examples**

**Robot Framework**

.. code-block:: robotframework

    *** Tasks ***
    Create output items with variables then save
        ${customers} =  Load customer data
        FOR     ${customer}    IN    @{customers}
            Create Output Work Item
            Set Work Item Variables    id=${customer.id}
            ...     name=${customer.name}
            Save Work Item
        END

    Create and save output items with variables and files in one go
        ${customers} =  Load customer data
        FOR     ${customer}    IN    @{customers}
            &amp;{customer_vars} =    Create Dictionary    id=${customer.id}
            ...     name=${customer.name}
            Create Output Work Item     variables=${customer_vars}
            ...     files=devdata${/}report.csv   save=${True}
        END

**Python**

.. code-block:: python

    from RPA.Robocorp.WorkItems import WorkItems

    wi = WorkItems()
    wi.get_input_work_item()
    customers = wi.get_work_item_variable("customers")
    for customer in customers:
        wi.create_output_work_item(customer, save=True)</doc>
<shortdoc>Create a new output work item with optional variables and files.</shortdoc>
</kw>
<kw name="Delete Work Item Variables" source="./RPA/Robocorp/WorkItems.py" lineno="1501">
<arguments repr="*names, force=True">
<arg kind="VAR_POSITIONAL" required="false" repr="*names">
<name>names</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="force=True">
<name>force</name>
<default>True</default>
</arg>
</arguments>
<doc>Delete variable(s) from the current work item.

:param names: Names of variables to remove
:param force: Ignore variables that don't exist in work item

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Delete work item variables    username    email
        Save Work Item</doc>
<shortdoc>Delete variable(s) from the current work item.</shortdoc>
</kw>
<kw name="For Each Input Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1725">
<arguments repr="keyword_or_func: str | Callable, *args, items_limit: int = 0, return_results: bool = True, **kwargs">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="keyword_or_func: str | Callable">
<name>keyword_or_func</name>
<type typedoc="string">str</type>
<type>Callable</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*args">
<name>args</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="items_limit: int = 0">
<name>items_limit</name>
<type typedoc="integer">int</type>
<default>0</default>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="return_results: bool = True">
<name>return_results</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Run a keyword or function for each work item in the input queue.

Automatically collects and returns a list of results, switch
``return_results`` to ``False`` for avoiding this.

:param keyword_or_func: The RF keyword or Py function you want to map through
    all the work items
:param args: Variable list of arguments that go into the called keyword/function
:param kwargs: Variable list of keyword arguments that go into the called
    keyword/function
:param items_limit: Limit the queue item retrieval to a certain amount,
    otherwise all the items are retrieved from the queue until depletion
:param return_results: Collect and return a list of results given each
    keyword/function call if truthy

Example:

.. code-block:: robotframework

    *** Tasks ***
    Log Payloads
        @{lengths} =     For Each Input Work Item    Log Payload
        Log   Payload lengths: @{lengths}

    *** Keywords ***
    Log Payload
        ${payload} =     Get Work Item Payload
        Log To Console    ${payload}
        ${len} =     Get Length    ${payload}
        [Return]    ${len}

OR

.. code-block:: python

    import logging
    from RPA.Robocorp.WorkItems import WorkItems

    library = WorkItems()

    def log_payload():
        payload = library.get_work_item_payload()
        print(payload)
        return len(payload)

    def log_payloads():
        library.get_input_work_item()
        lengths = library.for_each_input_work_item(log_payload)
        logging.info("Payload lengths: %s", lengths)

    log_payloads()</doc>
<shortdoc>Run a keyword or function for each work item in the input queue.</shortdoc>
</kw>
<kw name="Get Current Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1938">
<arguments repr="">
</arguments>
<doc>Get the currently active work item.

The current work item is used as the target by other keywords
in this library.

Keywords ``Get Input Work Item`` and ``Create Output Work Item``
set the active work item automatically, and return the created
instance.

With this keyword the active work item can be retrieved manually.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${input} =    Get Current Work Item
        ${output} =   Create Output Work Item
        Set Current Work Item    ${input}</doc>
<shortdoc>Get the currently active work item.</shortdoc>
</kw>
<kw name="Get Input Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1166">
<arguments repr="_internal_call: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="_internal_call: bool = False">
<name>_internal_call</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Load the next work item from the input queue, and set it as the active work
item.

Each time this is called, the previous input work item is released (as DONE)
prior to reserving the next one.
If the library import argument ``autoload`` is truthy (default),
this is called automatically when the Robot Framework suite
starts.</doc>
<shortdoc>Load the next work item from the input queue, and set it as the active work item.</shortdoc>
</kw>
<kw name="Get Work Item File" source="./RPA/Robocorp/WorkItems.py" lineno="1561">
<arguments repr="name, path=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="path=None">
<name>path</name>
<default>None</default>
</arg>
</arguments>
<doc>Get attached file from work item to disk.
Returns the absolute path to the created file.

:param name: Name of attached file
:param path: Destination path of file. If not given, current
             working directory is used.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${path}=    Get work item file    input.xls
        Open workbook    ${path}</doc>
<shortdoc>Get attached file from work item to disk. Returns the absolute path to the created file.</shortdoc>
</kw>
<kw name="Get Work Item Files" source="./RPA/Robocorp/WorkItems.py" lineno="1626">
<arguments repr="pattern, dirname=None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pattern">
<name>pattern</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="dirname=None">
<name>dirname</name>
<default>None</default>
</arg>
</arguments>
<doc>Get files attached to work item that match given pattern.
Returns a list of absolute paths to the downloaded files.

:param pattern: Filename wildcard pattern
:param dirname: Destination directory, if not given robot root is used

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${paths}=    Get work item files    customer_*.xlsx
        FOR  ${path}  IN  @{paths}
            Handle customer file    ${path}
        END</doc>
<shortdoc>Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.</shortdoc>
</kw>
<kw name="Get Work Item Payload" source="./RPA/Robocorp/WorkItems.py" lineno="1319">
<arguments repr="">
</arguments>
<doc>Get the full JSON payload for a work item.

**NOTE**: Most use cases should prefer higher-level keywords.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${payload}=    Get work item payload
        Log    Entire payload as dictionary: ${payload}</doc>
<shortdoc>Get the full JSON payload for a work item.</shortdoc>
</kw>
<kw name="Get Work Item Variable" source="./RPA/Robocorp/WorkItems.py" lineno="1377">
<arguments repr="name, default=&lt;object object at 0x129a3fd80&gt;">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="default=&lt;object object at 0x129a3fd80&gt;">
<name>default</name>
<default>&lt;object object at 0x129a3fd80&gt;</default>
</arg>
</arguments>
<doc>Return a single variable value from the work item,
or default value if defined and key does not exist.

If key does not exist and default is not defined, raises `KeyError`.

:param name: Name of variable
:param default: Default value if key does not exist

Robot Framework Example:

.. code-block:: robotframework

    *** Tasks ***
    Using a work item
        ${username}=    Get work item variable    username    default=guest

Python Example:

.. code-block:: python

    from RPA.Robocorp.WorkItems import WorkItems

    wi = WorkItems()
    wi.get_input_work_item()
    customers = wi.get_work_item_variable("customers")
    print(customers)</doc>
<shortdoc>Return a single variable value from the work item, or default value if defined and key does not exist.</shortdoc>
</kw>
<kw name="Get Work Item Variables" source="./RPA/Robocorp/WorkItems.py" lineno="1415">
<arguments repr="">
</arguments>
<doc>Read all variables from the current work item and
return their names and values as a dictionary.

Robot Framework Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${variables}=    Get work item variables
        Log    Username: ${variables}[username], Email: ${variables}[email]

Python Example:

    from RPA.Robocorp.WorkItems import WorkItems
    wi = WorkItems()
    wi.get_input_work_item()
    input_wi = wi.get_work_item_variables()
    print(input_wi["username"])
    print(input_wi["email"])</doc>
<shortdoc>Read all variables from the current work item and return their names and values as a dictionary.</shortdoc>
</kw>
<kw name="List Work Item Files" source="./RPA/Robocorp/WorkItems.py" lineno="1546">
<arguments repr="">
</arguments>
<doc>List the names of files attached to the current work item.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${names}=    List work item files
        Log    Work item has files with names: ${names}</doc>
<shortdoc>List the names of files attached to the current work item.</shortdoc>
</kw>
<kw name="List Work Item Variables" source="./RPA/Robocorp/WorkItems.py" lineno="1361">
<arguments repr="">
</arguments>
<doc>List the variable names for the current work item.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${variables}=    List work item variables
        Log    Available variables in work item: ${variables}</doc>
<shortdoc>List the variable names for the current work item.</shortdoc>
</kw>
<kw name="Release Input Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1818">
<arguments repr="state: State | str, exception_type: Error | str | None = None, code: str | None = None, message: str | None = None, _auto_release: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="state: State | str">
<name>state</name>
<type typedoc="State">State</type>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="exception_type: Error | str | None = None">
<name>exception_type</name>
<type typedoc="Error">Error</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="code: str | None = None">
<name>code</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="message: str | None = None">
<name>message</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="_auto_release: bool = False">
<name>_auto_release</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Release the lastly retrieved input work item and set its state.

This can be released with DONE or FAILED states. With the FAILED state, an
additional exception can be sent to Control Room describing the problem that
you encountered by specifying a type and optionally a code and/or message.
After this has been called, no more output work items can be created
unless a new input work item has been loaded again.

:param state: The status on the last processed input work item
:param exception_type: Error type (BUSINESS, APPLICATION). If this is not
    specified, then the cloud will assume UNSPECIFIED
:param code: Optional error code identifying the exception for future
    filtering, grouping and custom retrying behaviour in the cloud
:param message: Optional human-friendly error message supplying additional
    details regarding the sent exception

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Login into portal
            ${user} =     Get Work Item Variable    user
            ${doc} =    Get Work Item Variable    doc
            TRY
                Login Keyword    ${user}
                Upload Doc Keyword    ${doc}

            EXCEPT    Login Failed
                Release Input Work Item     FAILED
                ...    exception_type=APPLICATION
                ...    code=LOGIN_PORTAL_DOWN
                ...    message=Unable to login, retry again later.

            EXCEPT    Format Error    AS    ${err}
                ${message} =    Catenate
                ...    Document format is not correct and cannot be uploaded.
                ...    Correct the format in this work item and try again.
                ...    Full error message received: ${err}
                Release Input Work Item     FAILED
                ...    exception_type=BUSINESS
                ...    code=DOC_FORMAT_ERROR
                ...    message=${message}

            END

OR

.. code-block:: python

    from RPA.Robocorp.WorkItems import State, WorkItems

    library = WorkItems()

    def process_and_set_state():
        library.get_input_work_item()
        library.release_input_work_item(State.DONE)
        print(library.current.state)  # would print "State.DONE"

    process_and_set_state()</doc>
<shortdoc>Release the lastly retrieved input work item and set its state.</shortdoc>
</kw>
<kw name="Remove Work Item File" source="./RPA/Robocorp/WorkItems.py" lineno="1605">
<arguments repr="name, missing_ok=True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok=True">
<name>missing_ok</name>
<default>True</default>
</arg>
</arguments>
<doc>Remove attached file from work item.

:param name: Name of attached file
:param missing_ok: Do not raise exception if file doesn't exist

**NOTE**: Files are not deleted before work item is saved

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Remove work item file    input.xls
        Save Work Item</doc>
<shortdoc>Remove attached file from work item.</shortdoc>
</kw>
<kw name="Remove Work Item Files" source="./RPA/Robocorp/WorkItems.py" lineno="1682">
<arguments repr="pattern, missing_ok=True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pattern">
<name>pattern</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="missing_ok=True">
<name>missing_ok</name>
<default>True</default>
</arg>
</arguments>
<doc>Removes files attached to work item that match the given pattern.

:param pattern: Filename wildcard pattern
:param missing_ok: Do not raise exception if file doesn't exist

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Remove work item files    *.xlsx
        Save Work Item</doc>
<shortdoc>Removes files attached to work item that match the given pattern.</shortdoc>
</kw>
<kw name="Save Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1287">
<arguments repr="">
</arguments>
<doc>Save the current data and files in the work item. If not saved,
all changes are discarded when the library goes out of scope.</doc>
<shortdoc>Save the current data and files in the work item. If not saved, all changes are discarded when the library goes out of scope.</shortdoc>
</kw>
<kw name="Set Current Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1129">
<arguments repr="item: WorkItem">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="item: WorkItem">
<name>item</name>
<type>WorkItem</type>
</arg>
</arguments>
<doc>Set the currently active work item.

The current work item is used as the target by other keywords
in this library.

Keywords \`Get Input Work Item\` and \`Create Output Work Item\`
set the active work item automatically, and return the created
instance.

With this keyword the active work item can be set manually.

Robot Framework Example:

.. code-block:: robotframework

    *** Tasks ***
    Creating outputs
        ${input}=    Get Input Work Item
        ${output}=   Create Output Work Item
        Set current work item    ${input}

Python Example:

.. code-block:: python

    from RPA.Robocorp.WorkItems import WorkItems

    wi = WorkItems()
    parent_wi = wi.get_input_work_item()
    child_wi = wi.create_output_work_item()
    wi.set_current_work_item(parent_wi)</doc>
<shortdoc>Set the currently active work item.</shortdoc>
</kw>
<kw name="Set Task Variables From Work Item" source="./RPA/Robocorp/WorkItems.py" lineno="1525">
<arguments repr="">
</arguments>
<doc>Convert all variables in the current work item to
Robot Framework task variables, see `variable scopes`_.

.. _variable scopes: https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        # Work item has variable INPUT_URL
        Set task variables from work item
        Log    The variable is now available: ${INPUT_URL}</doc>
<shortdoc>Convert all variables in the current work item to Robot Framework task variables, see `variable scopes`_.</shortdoc>
</kw>
<kw name="Set Work Item Payload" source="./RPA/Robocorp/WorkItems.py" lineno="1336">
<arguments repr="payload">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="payload">
<name>payload</name>
</arg>
</arguments>
<doc>Set the full JSON payload for a work item.

:param payload: Content of payload, must be JSON-serializable

**NOTE**: Most use cases should prefer higher-level keywords.
Using this keyword may cause errors when getting the payload via
the normal \`Get work item variable\` and
\`Get work item variables\` keywords if you do not set the payload
to a ``dict``.

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        ${output}=    Create dictionary    url=example.com    username=Mark
        Set work item payload    ${output}</doc>
<shortdoc>Set the full JSON payload for a work item.</shortdoc>
</kw>
<kw name="Set Work Item Variable" source="./RPA/Robocorp/WorkItems.py" lineno="1450">
<arguments repr="name, value">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="value">
<name>value</name>
</arg>
</arguments>
<doc>Set a single variable value in the current work item.

:param name: Name of variable
:param value: Value of variable

Robot Framework Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Set work item variable    username    MarkyMark
        Save Work Item

Python Example:

.. code-block:: python

    from RPA.Robocorp.WorkItems import WorkItems

    customers = [{"id": 1, "name": "Apple"}, {"id": 2, "name": "Microsoft"}]
    wi = WorkItems()
    wi.get_input_work_item()
    wi.set_work_item_variable("customers", customers)</doc>
<shortdoc>Set a single variable value in the current work item.</shortdoc>
</kw>
<kw name="Set Work Item Variables" source="./RPA/Robocorp/WorkItems.py" lineno="1481">
<arguments repr="**kwargs">
<arg kind="VAR_NAMED" required="false" repr="**kwargs">
<name>kwargs</name>
</arg>
</arguments>
<doc>Set multiple variables in the current work item.

:param kwargs: Pairs of variable names and values

Example:

.. code-block:: robotframework

    *** Tasks ***
    Example task
        Set work item variables    username=MarkyMark    email=mark@example.com
        Save Work Item</doc>
<shortdoc>Set multiple variables in the current work item.</shortdoc>
</kw>
</keywords>
<datatypes>
<enums>
<enum name="Error">
<doc>Failed work item error type.</doc>
<members>
<member name="BUSINESS" value="BUSINESS"/>
<member name="APPLICATION" value="APPLICATION"/>
</members>
</enum>
<enum name="State">
<doc>Work item state. (set when released)</doc>
<members>
<member name="DONE" value="COMPLETED"/>
<member name="FAILED" value="FAILED"/>
</members>
</enum>
</enums>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Create Output Work Item</usage>
<usage>For Each Input Work Item</usage>
<usage>Get Input Work Item</usage>
<usage>Release Input Work Item</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Create Output Work Item</usage>
</usages>
</type>
<type name="Error" type="Enum">
<doc>Failed work item error type.</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Release Input Work Item</usage>
</usages>
<members>
<member name="BUSINESS" value="BUSINESS"/>
<member name="APPLICATION" value="APPLICATION"/>
</members>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>For Each Input Work Item</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Create Output Work Item</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Create Output Work Item</usage>
<usage>Release Input Work Item</usage>
</usages>
</type>
<type name="State" type="Enum">
<doc>Work item state. (set when released)</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Release Input Work Item</usage>
</usages>
<members>
<member name="DONE" value="COMPLETED"/>
<member name="FAILED" value="FAILED"/>
</members>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Create Output Work Item</usage>
<usage>For Each Input Work Item</usage>
<usage>Release Input Work Item</usage>
</usages>
</type>
</typedocs>
</keywordspec>
