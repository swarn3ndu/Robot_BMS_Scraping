<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.RobotLogListener" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:06Z" specversion="4" source="./RPA/core/logger.py" lineno="24">
<version/>
<doc>`RobotLogListener` is a library for controlling logging during
a Robot Framework execution using the listener API.

**About keyword parameters**

Parameters `names` and `keywords` for keywords `Mute Run On Failure` and `Register Protected Keywords`
do not need to be full names of keywords, ie. all keywords matching even partially will be affected.
`Run Keyword` would match all `BuiltIn` library keywords (17 keywords in RF 3.2.1) and of course all
`Run Keyword` named keywords in any resource and/or library file which are imported would be matched also.

**Mute Run On Failure**

This keyword is to be used specifically with `RPA.Browser.Selenium` library, which extends
`SeleniumLibrary`.  Normally most of the `SeleniumLibrary` keywords execute `run_on_failure`
behaviour, which can be set at library initialization. By default this behaviour is running
`Capture Page Screenshot` keyword on failure.

In the example task `Check the official website` below the keyword `Run Keyword` is muted and when
it runs the keyword `Element Should Be Visible` then those failures do not create page screenshots
into log file.

It is also possible to change default failure behaviour by giving parameter
`optional_keyword_to_run` for `Mute Run On Failure`, see task `Check the official website with error log`.
This optional keyword would be then executed on failure. Due to the underlying `SeleniumLibrary`
implementation this keyword can't have arguments.

Example of using `Mute Run On Failure` without and with optional keyword to run.

.. code-block:: robotframework

   *** Settings ***
   Library         RPA.Browser.Selenium
   Library         RPA.RobotLogListener
   Task Setup      Set Task Variable   ${TRIES}   1
   Task Teardown   Close All Browsers

   *** Tasks ***
   Check the official website
      Mute Run On Failure   Run Keyword
      Open Available Browser   https://www.robocorp.com
      Check for visible element
      Capture Page Screenshot

   Check the official website with error log
      Mute Run On Failure   Run Keyword  optional_keyword_to_run=Log tries
      Open Available Browser   https://www.robocorp.com
      Check for visible element
      Capture Page Screenshot

   *** Keywords ***
   Check for visible element
      FOR  ${idx}  IN RANGE  1   20
         Set Task Variable   ${TRIES}   ${idx}
         ${status}   Run Keyword And Return Status   Element Should Be Visible  id:xyz
         Exit For Loop If   '${status}' == 'PASS'
         Sleep  2s
      END

   Log tries
      Log  Checked element visibility ${TRIES} times

**Register Protected Keywords**

This keyword is used to totally disable logging for named keywords. In the example below
the keyword `This will not output` is protected and it will not be logging into Robot Framework
log files.

**Robot Framework**

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.RobotLogListener

    *** Tasks ***
    Protecting keywords
       This will not output        # will output because called before register
       Register Protected Keywords    This will not output
       This will not output        # is now registered
       This will output

    *** Keywords ***
    This will not output
       Log   1

    This will output
       Log   2

**Python**

.. code-block:: python

    from robot.libraries.BuiltIn import BuiltIn, RobotNotRunningError
    from RPA.RobotLogListener import RobotLogListener

    try:
       BuiltIn().import_library("RPA.RobotLogListener")
    except RobotNotRunningError:
       pass

    class CustomLibrary:

       def __init__(self):
          listener = RobotLogListener()
          listener.register_protected_keywords(
                ["CustomLibrary.special_keyword"]
          )

       def special_keyword(self):
          print('will not be written to log')
          return 'not shown in the log'</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="End Keyword" lineno="266">
<arguments repr="name, attributes">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attributes">
<name>attributes</name>
</arg>
</arguments>
<doc>Listener method for keyword end.

:param name: keyword name
:param attributes: keyword attributes

If `name` exists in the protected keywords list then log level is
restored back to level it was before settings to NONE.</doc>
<shortdoc>Listener method for keyword end.</shortdoc>
</kw>
<kw name="Mute Run On Failure" lineno="184">
<arguments repr="keywords: str | List | None = None, optional_keyword_to_run: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="keywords: str | List | None = None">
<name>keywords</name>
<type typedoc="string">str</type>
<type typedoc="list">List</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="optional_keyword_to_run: str | None = None">
<name>optional_keyword_to_run</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Set keywords which should not execute `SeleniumLibrary`
default behaviour of running keyword on failure.

:param keywords: list of keywords to mute
:param optional_keyword_to_run: name of the keyword to execute
    if keyword defined by `keywords` fail

Keyword names do not need to be full names of keywords, ie. all keywords
matching even partially will be affected. `Run Keyword` would match all
`BuiltIn` library keywords (17 keywords in RF 3.2.1) and of course all
`Run Keyword` named keywords in any resource and/or library file which
are imported would be matched also.

By default `SeleniumLibrary` executes `Capture Page Screenshot`
on failure.

If `optional_keyword_to_run` is not given then nothing is done
on failure, but this can be set to override `SeleniumLibrary`
default behaviour for a set of keywords.</doc>
<shortdoc>Set keywords which should not execute `SeleniumLibrary` default behaviour of running keyword on failure.</shortdoc>
</kw>
<kw name="Only Info Level" lineno="156">
<arguments repr="names: str | List | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="names: str | List | None = None">
<name>names</name>
<type typedoc="string">str</type>
<type typedoc="list">List</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Register keywords that are allowed only INFO level logging

:param names: list of keywords to protect</doc>
<shortdoc>Register keywords that are allowed only INFO level logging</shortdoc>
</kw>
<kw name="Register Protected Keywords" lineno="170">
<arguments repr="names: str | List | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="names: str | List | None = None">
<name>names</name>
<type typedoc="string">str</type>
<type typedoc="list">List</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Register keywords that are not going to be logged into Robot Framework logs.

:param names: list of keywords to protect</doc>
<shortdoc>Register keywords that are not going to be logged into Robot Framework logs.</shortdoc>
</kw>
<kw name="Start Keyword" lineno="226">
<arguments repr="name, attributes">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="name">
<name>name</name>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="attributes">
<name>attributes</name>
</arg>
</arguments>
<doc>Listener method for keyword start.

:param name: keyword name
:param attributes: keyword attributes

If `name` exists in the protected keywords list then log level is
temporarily set to NONE.</doc>
<shortdoc>Listener method for keyword start.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Mute Run On Failure</usage>
<usage>Only Info Level</usage>
<usage>Register Protected Keywords</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Mute Run On Failure</usage>
<usage>Only Info Level</usage>
<usage>Register Protected Keywords</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Mute Run On Failure</usage>
<usage>Only Info Level</usage>
<usage>Register Protected Keywords</usage>
</usages>
</type>
</typedocs>
</keywordspec>
