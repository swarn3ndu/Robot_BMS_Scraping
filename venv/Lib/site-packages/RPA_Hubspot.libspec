<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Hubspot" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:06Z" specversion="4" source="./RPA/Hubspot.py" lineno="411">
<version/>
<doc>*Hubspot* is a library for accessing HubSpot using REST API. It
extends `hubspot-api-client &lt;https://pypi.org/project/hubspot-api-client/&gt;`_.

Current features of this library focus on retrieving CRM object data
from HubSpot via API. For additional information, see
`Understanding the CRM &lt;https://developers.hubspot.com/docs/api/crm/understanding-the-crm&gt;`_.

Using Date Times When Searching
===============================

When using date times with the Hubspot API, you must provide
them as Unix-style epoch timestamps (with milliseconds), which can be obtained
using the ``DateTime`` library's ``Convert Date`` with the
argument ``result_format=epoch``. The resulting timestamp string
will be a float, but the API only accepts integers, so you must
multiply the resulting timestamp by 1,000 and then round  it to
the nearest integar to include in API calls (i.e., the resulting
integer sent to the API must have 13 digits as of March 18, 2022).

**Robot framework example usage:**

.. code-block:: robotframework

    *** Settings ***
    Library     DateTime
    Library     RPA.Hubspot
    Task Setup  Authorize Hubspot

    *** Tasks ***
    Search with date
        ${yesterday}=    Get current date    increment=-24h   result_format=epoch
        ${yesterday_hs_ts}=    Evaluate    round(${yesterday} * 1000)
        ${deals}=    Search for objects    DEALS
        ...    hs_lastmodifieddate    GTE    ${yesterday_hs_ts}

**Python example usage**

.. code-block:: python

    from robot.libraries.DateTime import get_current_date, subtract_time_from_date
    from RPA.Hubspot import Hubspot
    from RPA.Robocorp.Vault import Vault

    secrets = Vault().get_secret("hubspot")

    hs = Hubspot(hubspot_apikey=secrets["api_key"])
    yesterday = round(
        subtract_time_from_date(get_current_date(), "24h", result_format="epoch") * 1000
    )
    deals = hs.search_for_objects("DEALS", "hs_lastmodifieddate", "GTE", yesterday)
    print(deals)

.. _batch-inputs:

Batch Inputs
============

When retrieving information, the library automatically batches requests
that are provided as lists, see \`Get object\` keyword for an example,
but when wishing to create or update many objects, the library provides
a batching system.

In order to start a batch, you must first call the \`Create new batch\`
keyword. This initializes a new batch to accept inputs. If a batch
already exists when you call this keyword, it will be lost and a new
blank one will be started.

Once the batch has been initialized, you can add inputs one at a time with
\`Add input to batch\` or many at a time with \`Extend batch with inputs\`.

In order to finally send the batch to HubSpot, you must call
\`Execute batch\`. The final keyword will return the created or updated
objects from HubSpot. New object IDs can be obtained from the ``id``
property, see the `SimplePublicObject`_ reference.

**Robot framework example:**

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.Hubspot
    Library         RPA.Robocorp.Vault
    Task Setup      Authorize Hubspot

    *** Tasks ***
    Create objects via batch
        Create new batch
        Add input to batch    name=Nokia    country=Finland
        Add input to batch    name=Google    country=USA
        ${new_companies}=    Execute batch
        Log    The first new company added has the new id ${{$new_companies[0].id}}

    *** Keywords ***
    Authorize Hubspot
        ${secrets}=    Get secret    hubspot
        Auth with api key    ${secrets}[API_KEY]

**Python example:**

**NOTE:** When executing a batch input in Python, you can directly import the
``BatchInputFactory`` class to use to create your batch input before
executing the batch.

.. code-block:: python

    from RPA.Hubspot import Hubspot, BatchInputFactory, BatchMode
    from RPA.Robocorp.Vault import RobocorpVault


    vault = RobocorpVault()
    secrets = vault.get_secret("hubspot")

    hs = Hubspot(secrets["API_KEY"])

    batch = BatchInputFactory(BatchMode.UPDATE, "company")
    batch.extend_inputs(
        [
            {"name": "Nokia's New Name", "city": "Espoo"},
            {"name": "Alphabet", "city": "Mountain View"},
        ],
        ["1001", "1002"],
    )
    hs.batch_input = batch
    updated_companies = hs.execute_batch()
    print(
        "Companies have been updated:\\n" +
        "\\n".join([str(c) for c in updated_companies])
    )

Information Caching
===================

This library loads custom object schemas and pipelines into memory
the first time when keywords using them are called. These cached versions
are recalled unless the ``use_cache`` is set to ``False``, where available.

Custom Object Types
===================

All keywords that request a parameter of ``object_type`` can accept
custom object type names as long as they are properly configured in
HubSpot. The system will lookup the custom object ID using the
provided name against the configured name or one of the configured
labels (e.g., "singular" and "plural" types of the name).

HubSpot Object Reference
========================

This section describes the types of objects returned by this Library
and their associated attributes. These attributes can be accessed via
dot-notation as described in the `Attribute Access`_ section below.

Attribute Access
----------------

Keywords return native Python Hubspot objects, rather than common Robot
Framework types. These types have sets of defined attributes allowing
for dot-notation access of object properties. Properties (e.g.,
those configured in Hubspot settings for each object) will be
accessible in a Python dictionary attached to the ``properties`` attribute
of the returned object. See the `Attribute Definitions`_ section for
details of that associated attributes for all types returned by this
library.

Example usage retrieving the ``city`` property of a *Company* object:

**Robot framework example:**

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.Hubspot
    Library         RPA.Robocorp.Vault

    Task Setup      Authorize Hubspot

    *** Variables ***
    ${ACCOUNT_NOKIA}    6818764598

    *** Tasks ***
    Obtain city information from Hubspot
        ${account}=    Get object    COMPANY    ${ACCOUNT_NOKIA}
        Log    The city for account number ${ACCOUNT_NOKIA} is ${account.properties}[city]

    *** Keywords ***
    Authorize Hubspot
        ${secrets}=    Get secret    hubspot
        Auth with api key    ${secrets}[API_KEY]

**Python example:**

.. code-block:: python

    from RPA.Hubspot import Hubspot
    from RPA.Robocorp.Vault import RobocorpVault

    vault = RobocorpVault()
    secrets = vault.get_secret("hubspot")

    hs = Hubspot(secrets["API_KEY"])
    nokia_account_id = "6818764598"
    account = hs.get_object("COMPANY", nokia_account_id)
    print(f"The city for account number {nokia_account_id} is {account.properties['city']}")

Attribute Definitions
---------------------

This library can return various types of objects, whose attributes
are only accessible via dot-notation. The below reference describes
the attributes available on these objects.

SimplePublicObject
^^^^^^^^^^^^^^^^^^

An object in HubSpot. The object itself does not describe what type
it represents.

*id* : ``str``
    The HubSpot ID of the object.

*properties* : ``Dict[str, str]``
    A dictionary representing all returned properties associated
    to this object. Properties must be accessed as via standard
    dictionary subscription, e.g., ``properties["name"]``.

*created_at* : ``datetime``
    The timestamp when this object was created in HubSpot.

*updated_at* : ``datetime``
    The last modified timestamp for this object.

*archived* : ``bool``
    Whether this object is archived.

*archived_at* : ``datetime``
    The timestamp when this object was archived.

SimplePublicObjectWithAssociations
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

An object in HubSpot including associations to other objects. The
object itself does not describe what type it represents.

*id* : ``str``
    The HubSpot ID of the object.

*properties* : ``Dict[str, str]``
    A dictionary representing all returned properties associated
    to this object. Properties must be accessed as via standard
    dictionary subscription, e.g., ``properties["name"]``.

*created_at* : ``datetime``
    The timestamp when this object was created in HubSpot.

*updated_at* : ``datetime``
    The last modified timestamp for this object.

*archived* : ``bool``
    Whether this object is archived.

*archived_at* : ``datetime``
    The timestamp when this object was archived.

*associations* : ``Dict[str, CollectionResponseAssociatedId]``
    A dictionary whose key will be the requested association type, e.g.,
    ``companies`` and associated value will be a container object
    with all the associations. See `CollectionResponseAssociatedId`_.

AssociatedId
^^^^^^^^^^^^

The ID of an associated object, as well as the type of association.

*id* : ``str``
    The ID of the associated HubSpot object.

*type* : ``str``
    The type of association, e.g., ``deals_to_companies``.

CollectionResponseAssociatedId
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A container object for a collection of `AssociatedId`_ objects returned
by the API.

*results* : ``List[AssociatedId]``
    The list of `AssociatedId`_ objects returned by the API.

*paging* : ``Paging``
    Used by this library to assist with retreiving multi-page
    API responses.

Pipeline
^^^^^^^^

A pipeline represents the steps objects travel through within HubSpot.

*id* : ``str``
    The HubSpot ID for the pipeline. All accounts start with one
    pipeline with the id ``default``.

*label* : ``str``
    The human-readabel label for the pipeline.

*stages* : ``List[PipelineStage]``
    A list of `PipelineStage`_ objects in the order the object would
    follow through the pipeline.

*created_at* : ``datetime``
    The timestamp when this pipeline was created in HubSpot.

*updated_at* : ``datetime``
    The last modified timestamp for this pipeline.

*archived* : ``bool``
    Whether this pipeline is archived.

*display_order* : ``int``
    The place in the list of pipelines where this pipeline is shown
    in the HubSpot UI.

PipelineStage
^^^^^^^^^^^^^

A pipeline stage is one of the various stages defined in a `Pipeline`_.

*id* : ``str``
    The HubSpot ID of the stage.

*label* : ``str``
    The human-readabel label for the stage.

*metadata* : ``Dict[str, str]``
    A dictionary of additional data associated with ths stage, such
    as ``probability``.

*created_at* : ``datetime``
    The timestamp when this stage was created in HubSpot.

*updated_at* : ``datetime``
    The last modified timestamp for this stage.

*archived* : ``bool``
    Whether this stage is archived.

*archived_at* : ``datetime``
    The timestamp when this stage was archived.

PublicOwner
^^^^^^^^^^^

An owner in HubSpot. Owners of companies and deals are responsible
for driving a sale to close or similar.

*id* : ``str``
    The HubSpot ID of the owner.

*email* : ``str``
    The owner's email address in HubSpot.

*first_name* : ``str``
    The owner's first name.

*last_name* : ``str``
    The owner's last name.

*user_id* : ``int``
    The associated user ID if the owner is a HubSpot user.

*created_at* : ``datetime``
    The timestamp when this owner was created in HubSpot.

*updated_at* : ``datetime``
    The last modified timestamp for this owner.

*archived* : ``bool``
    Whether this owner is archived.

*teams* : ``List[PublicTeam]``
    A list of teams the owner is in. See `PublicTeam`_.

PublicTeam
^^^^^^^^^^

A team of owners in HubSpot

*id* : ``str``
    The HubSpot ID of the Team.

*name* : ``str``
    The Team's name.

*membership* : ``str``
    One of ``PRIMARY``, ``SECONDARY``, or ``CHILD``.</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="846">
<arguments repr="hubspot_apikey: str | None = None, hubspot_access_token: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="hubspot_apikey: str | None = None">
<name>hubspot_apikey</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="hubspot_access_token: str | None = None">
<name>hubspot_access_token</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>The library can be imported with the API key or Access
Token supplied, but this may preclude the ability to use
secrets from the Control Room Vault or similar credential
manager.</doc>
<shortdoc>The library can be imported with the API key or Access Token supplied, but this may preclude the ability to use secrets from the Control Room Vault or similar credential manager.</shortdoc>
</init>
</inits>
<keywords>
<kw name="Add Input To Batch" lineno="1709">
<arguments repr="object_id: str | None = None, **properties">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="object_id: str | None = None">
<name>object_id</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**properties">
<name>properties</name>
</arg>
</arguments>
<doc>Add the provided free-named keyword arguments to the current
batch input. If creating an ``UPDATE`` batch, you must also provide
the Hubspot object ``id`` (an alternate ID property cannot be used).

The keyword will fail if an ID is provided to a batch that is
currently in CREATE mode and has any inputs already.

See `Batch Inputs`` for complete information on using the batch
input API.

:param properties: A dictionary of HubSpot properties to set to
    the HubSpot object being created or updated.
:param id: The HubSpot ID of the object to be updated. If provided,
    the batch is assumed to be in UPDATE mode. The keyword will
    fail if an ID is provided to a batch that is currently in CREATE
    mode and has any inputs already.</doc>
<shortdoc>Add the provided free-named keyword arguments to the current batch input. If creating an ``UPDATE`` batch, you must also provide the Hubspot object ``id`` (an alternate ID property cannot be used).</shortdoc>
</kw>
<kw name="Auth With Api Key" lineno="1051">
<arguments repr="api_key: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="api_key: str">
<name>api_key</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Deprecated! Use ``Auth With Token`` instead.

Authorize to HubSpot with an account-wide API key. This
keyword verifies the provided credentials by retrieving the
custom object schema from the API.

:param api_key: The API key for the account to authenticate to.</doc>
<shortdoc>Deprecated! Use ``Auth With Token`` instead.</shortdoc>
</kw>
<kw name="Auth With Token" lineno="1024">
<arguments repr="access_token: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="access_token: str">
<name>access_token</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Authorize to HubSpot with Private App access token. This
keyword verifies the provided credentials by retrieving the
custom object schema from the API.

Learn more about Private Apps:
https://developers.hubspot.com/docs/api/private-apps

:param access_token: The access token created for the Private App
    in your HubSpot account.</doc>
<shortdoc>Authorize to HubSpot with Private App access token. This keyword verifies the provided credentials by retrieving the custom object schema from the API.</shortdoc>
</kw>
<kw name="Clear Current Batch" lineno="1757">
<arguments repr="">
</arguments>
<doc>Returns the current batch and then clears it.

See `Batch Inputs`` for complete information on using the batch
input API.</doc>
<shortdoc>Returns the current batch and then clears it.</shortdoc>
</kw>
<kw name="Create New Batch" lineno="1692">
<arguments repr="object_type: str, mode: BatchMode">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="mode: BatchMode">
<name>mode</name>
<type typedoc="BatchMode">BatchMode</type>
</arg>
</arguments>
<doc>Creates a new blank batch input for the provided ``object_type`` in
either the ``UPDATE`` or ``CREATE`` mode.

See `Batch Inputs`` for complete information on using the batch
input API.

:param object_type: The object type to be created or updated by
    the batch.
:param mode: either ``UPDATE`` or ``CREATE``.</doc>
<shortdoc>Creates a new blank batch input for the provided ``object_type`` in either the ``UPDATE`` or ``CREATE`` mode.</shortdoc>
</kw>
<kw name="Create Object" lineno="1608">
<arguments repr="object_type, **properties">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type">
<name>object_type</name>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**properties">
<name>properties</name>
</arg>
</arguments>
<doc>Creates a new Hubspot object of the provided ``object_type``
and with the provided properties in Hubspot. Read-only or
nonexistent properties are ignored. The ``object_type``
parameter automatically looks up custom object IDs based on the
provided name.

The Hubspot properties to be updated must be provided as additional
labeled paremeters to this keyword.

Returns the newly created object. The new object's ``id`` is available
via the property ``id``.

:param object_type: The object type to be created.
:param properties: All remaining labeled parameters passed into
    this keyword will be used as the properties of the new
    object. Read-only or nonexistent properties will be ignored.</doc>
<shortdoc>Creates a new Hubspot object of the provided ``object_type`` and with the provided properties in Hubspot. Read-only or nonexistent properties are ignored. The ``object_type`` parameter automatically looks up custom object IDs based on the provided name.</shortdoc>
</kw>
<kw name="Execute Batch" lineno="1830">
<arguments repr="">
</arguments>
<doc>Sends the current batch input to the Hubspot API.

Keyword will only fail if all inputs resulted in error. Partial
failures are reported as warnings.

See `Batch Inputs`` for complete information on using the batch
input API.

:return: The updated or created objects as a list of
    ``SimplePublicObject`` types.</doc>
<shortdoc>Sends the current batch input to the Hubspot API.</shortdoc>
</kw>
<kw name="Extend Batch With Inputs" lineno="1731">
<arguments repr="properties: List[Dict[str, str]], ids: List[str] | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="properties: List[Dict[str, str]]">
<name>properties</name>
<type typedoc="list">List[Dict[str, str]]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ids: List[str] | None = None">
<name>ids</name>
<type typedoc="list">List[str]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Extends the current batch input with the provided lists of
Hubspot ``properties`` and Hubspot object ``ids``. The ``ids``
parameter must be provided when extending an ``UPDATE`` batch.
The two provided lists will be zipped together in the same order
as provided.

The keyword will fail if an ID is provided to a batch that is
currently in CREATE mode and has any inputs already.

See `Batch Inputs`` for complete information on using the batch
input API.

:param properties: A list of dictionaries of HubSpot properties to
    set to the HubSpot objects being created or updated.
:param ids: The HubSpot IDs of the objects to be updated. If provided,
    the batch is assumed to be in UPDATE mode. The keyword will
    fail if an ID is provided to a batch that is currently in CREATE
    mode and has any inputs already.</doc>
<shortdoc>Extends the current batch input with the provided lists of Hubspot ``properties`` and Hubspot object ``ids``. The ``ids`` parameter must be provided when extending an ``UPDATE`` batch. The two provided lists will be zipped together in the same order as provided.</shortdoc>
</kw>
<kw name="Get Current Batch" lineno="1781">
<arguments repr="">
</arguments>
<doc>Returns the current batch.

See `Batch Inputs`` for complete information on using the batch
input API.

:return: The current batch input object.</doc>
<shortdoc>Returns the current batch.</shortdoc>
</kw>
<kw name="Get Current Batch Inputs" lineno="1792">
<arguments repr="">
</arguments>
<doc>Returns the inputs in the current batch. The returned list will
be a list of dictionaries each with either 1 or 2 keys depending
on if the batch is in ``CREATE`` or ``UPDATE`` mode. If in ``UPDATE``
mode, the dictionaries will have the keys ``properties`` and ``id``,
but if in ``CREATE`` mode, the dictionaries will only have the
``properties`` key.

See `Batch Inputs`` for complete information on using the batch
input API.

:return: A list of dictionaries representing the current inputs.</doc>
<shortdoc>Returns the inputs in the current batch. The returned list will be a list of dictionaries each with either 1 or 2 keys depending on if the batch is in ``CREATE`` or ``UPDATE`` mode. If in ``UPDATE`` mode, the dictionaries will have the keys ``properties`` and ``id``, but if in ``CREATE`` mode, the dictionaries will only have the ``properties`` key.</shortdoc>
</kw>
<kw name="Get Current Stage Of Object" lineno="2107">
<arguments repr="object_type: str, object_id: str, id_property: str | None = None, label_as_key: bool = True, use_cache: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_id: str">
<name>object_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="id_property: str | None = None">
<name>id_property</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="label_as_key: bool = True">
<name>label_as_key</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_cache: bool = True">
<name>use_cache</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Returns the current pipeline stage for the object as a tuple of
the stage label and that stage's associated metadata as a dictionary.
If you want the label to be returned as the numerical API ID, set
``label_as_key`` to False.

If the object type does not have an applied pipeline, the keyword
will fail.

This keyword caches results for future use, to refresh results from
Hupspot, set ``use_cache`` to ``False``.

:param object_type: The object type to be returned and that has
    the ID indicated. Custom objects will be validated against the
    schema.
:param object_id: The ID of the object to be returned.
:param id_property: (Optional) Can be used to allow the API to
    search the object database using an alternate property as the
    unique ID.
:param label_as_key: (Optional) Defaults to ``True``. Setting this
    to ``False`` will cause the returned dictionary to key off of ``id``
    instead of ``label``.
:param use_cache: (Optional) Setting this to ``False`` will force
    the system to recache the pipelines from Hubspot.

:return: A tuple where index 0 is the label or ID of the object's
    current stage and index 1 is associated data.</doc>
<shortdoc>Returns the current pipeline stage for the object as a tuple of the stage label and that stage's associated metadata as a dictionary. If you want the label to be returned as the numerical API ID, set ``label_as_key`` to False.</shortdoc>
</kw>
<kw name="Get Object" lineno="1529">
<arguments repr="object_type: str, object_id: str | List[str], id_property: str | None = None, properties: List[str] | str | None = None, associations: List[str] | str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_id: str | List[str]">
<name>object_id</name>
<type typedoc="string">str</type>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="id_property: str | None = None">
<name>id_property</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="properties: List[str] | str | None = None">
<name>properties</name>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="associations: List[str] | str | None = None">
<name>associations</name>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Reads objects of ``object_type`` from HubSpot with the
provided ``object_id``. The objects can be found using an
alternate ID by providing the name of that HubSpot property
which contains the unique identifier to ``id_property``. The ``object_type``
parameter automatically looks up custom object IDs based on the
provided name. If a list of object IDs is provided, the batch
API will be utilized, but in that case, ``associations`` cannot be
returned.

A list of property names can be provided to ``properties``
and they will be included in the returned object. Nonexistent
properties are ignored.

A list of object types can be provided to ``associations`` and all
object IDs associated to the returned object of that type will
be returned as well. Object types passed to this parameter are
also validated against built-in objects and custom object schemas.

:param object_type: The object type to be returned and that has
    the ID indicated.
:param object_id: The ID of the object to be returned.
:param id_property: (Optional) Can be used to allow the API to
    search the object database using an alternate property as the
    unique ID.
:param properties: (Optional) A list of strings representing
    property names to be included in the returned object.
    Nonexistent properties are ignored.
:param associations: (Optional) A list of strings representing
    object types to retrieve as associated object IDs.

:return: The requested object as a ``SimplePublicObject`` or
    ``SimplePublicObjectWithAssociations`` type. If a batch request
    was made, it returns a list of ``SimplePublicObject``.</doc>
<shortdoc>Reads objects of ``object_type`` from HubSpot with the provided ``object_id``. The objects can be found using an alternate ID by providing the name of that HubSpot property which contains the unique identifier to ``id_property``. The ``object_type`` parameter automatically looks up custom object IDs based on the provided name. If a list of object IDs is provided, the batch API will be utilized, but in that case, ``associations`` cannot be returned.</shortdoc>
</kw>
<kw name="Get Owner By Id" lineno="2205">
<arguments repr="owner_id: str = , owner_email: str = , user_id: str = ">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="owner_id: str = ">
<name>owner_id</name>
<type typedoc="string">str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="owner_email: str = ">
<name>owner_email</name>
<type typedoc="string">str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_id: str = ">
<name>user_id</name>
<type typedoc="string">str</type>
<default/>
</arg>
</arguments>
<doc>Returns an owner object with details about a HubSpot user denoted
as an owner of another HubSpot object, such as a contact or company.
You may provide the identifier as ``owner_id``, ``owner_email``, or
``user_id``. The ``owner_id`` will correspond to fields from the
CRM API while the ``user_id`` will correspond to the user
provisioning API (see keyword \`Get User\`).

The owner object has the following attributes (accessible via
dot notation):

If more than one of these IDs are provided, the keyword prefers
the ``owner_id``, then ``owner_email``, then the ``user_id``.

:param owner_id: The owner's HubSpot ID.
:param owner_email: The email address registered to the owner.
:param user_id: The owner's associated HubSpot user ID.

:return: The requested ``PublicOwner`` object.</doc>
<shortdoc>Returns an owner object with details about a HubSpot user denoted as an owner of another HubSpot object, such as a contact or company. You may provide the identifier as ``owner_id``, ``owner_email``, or ``user_id``. The ``owner_id`` will correspond to fields from the CRM API while the ``user_id`` will correspond to the user provisioning API (see keyword \`Get User\`).</shortdoc>
</kw>
<kw name="Get Owner Of Object" lineno="2242">
<arguments repr="hs_object: SimplePublicObject | SimplePublicObjectWithAssociations | Dict, owner_property: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="hs_object: SimplePublicObject | SimplePublicObjectWithAssociations | Dict">
<name>hs_object</name>
<type>SimplePublicObject</type>
<type>SimplePublicObjectWithAssociations</type>
<type typedoc="dictionary">Dict</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="owner_property: str | None = None">
<name>owner_property</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Looks up the owner of a given Hubspot object, the provided object
should be from this library or it should be a dictionary with an
``hubspot_owner_id`` key. If the object has no owner, this keyword
returns None. See keyword \`Get owner by ID\` for information about
the returned object.

You can use an alternate property as the owner ID property by providing
it with argument ``owner_property``. If that property does not exist
this keyword will try the default ``hubspot_owner_id`` property, instead.

:param object: A HubSpot object, best if the object was obtained
    via another keyword such as \`Get owner by ID\`
:param owner_property: An alternate property of the provided
    object to use as the field containing the Owner to be looked up.

:return: The ``PublicOwner`` of the provided object.</doc>
<shortdoc>Looks up the owner of a given Hubspot object, the provided object should be from this library or it should be a dictionary with an ``hubspot_owner_id`` key. If the object has no owner, this keyword returns None. See keyword \`Get owner by ID\` for information about the returned object.</shortdoc>
</kw>
<kw name="Get Pipeline" lineno="1979">
<arguments repr="object_type: str, pipeline_id: str, use_cache: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pipeline_id: str">
<name>pipeline_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_cache: bool = True">
<name>use_cache</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Returns the ``object_type`` pipeline identified by ``pipeline_id``.
The provided ``pipeline_id`` can be provided as the label (case sensitive)
or API ID code.

The ``Pipeline`` object returned includes a ``stages`` property, which
is a list of ``PipelineStage`` objects. The ``stages`` of the pipeline
represent the discreet steps an object travels through within the pipeline.
The order of the steps is determined by the ``display_order`` property.
These properties can be accessessed with dot notation and generator
comprehension; however, these are advanced Python concepts, so
it is generally easier to use the keyword ``Get Pipeline Stages`` to
get an ordered dictionary of the stages from first to last.

**Example**

.. code-block:: robotframework

    *** Tasks ***
    Get Step One
        ${pipeline}=    Get pipeline    DEALS   default
        ${step_one}=    Evaluate
        ... next((s.label for s in $pipeline.stages if s.display_order == 0))

This keyword caches results for future use, to refresh results from
Hupspot, set ``use_cache`` to ``False``.

:param object_type: The object type to be returned and that has
    the ID indicated. Custom objects will be validated against the
    schema.
:param pipeline_id: The numerical pipeline ID or the pipeline
    label visibal in the HubSpot UI (case sensitive).
:param use_cache: (Optional) Setting this to ``False`` will force
    the system to recache the pipelines from Hubspot.

:return: The ``Pipeline`` object requested.</doc>
<shortdoc>Returns the ``object_type`` pipeline identified by ``pipeline_id``. The provided ``pipeline_id`` can be provided as the label (case sensitive) or API ID code.</shortdoc>
</kw>
<kw name="Get Pipeline Stages" lineno="2028">
<arguments repr="object_type: str, pipeline_id: str, label_as_key: bool = True, use_cache: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="pipeline_id: str">
<name>pipeline_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="label_as_key: bool = True">
<name>label_as_key</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_cache: bool = True">
<name>use_cache</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Returns a dictionary representing the stages available in the
requested pipeline. Only pipelines for ``object_type`` are searched
using the ``pipeline_id`` as the label or Hubspot API identifier code.

By default, the keys of the returned dictionary represent the labels
of the stages, in order from first to last stage. You can have the
keyword return the numerical API ID as the key instead by setting
``label_as_key`` to ``False``.

Each item's value is a dictionary with three keys: ``id``, ``label``
and ``metadata``. The ``id`` is the numerical API ID associated with
the stage and ``label`` is the name of that stage. The
``metadata`` is a dictionary of metadata associated with that stage
(e.g., ``isClosed`` and ``probability`` for "deals" pipelines) that
is unique per pipeline.

**Example**

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.Hubspot
    Library         RPA.Robocorp.Vault

    Task Setup      Authorize Hubspot

    *** Tasks ***
    Use pipeline stages
        ${stages}=    Get pipeline stages    DEALS    Default
        ${closed_won_stage_id}=    Set variable    ${stages}[Closed Won][id]
        ${deals}=    Search for objects    DEALS
        ...    dealstage    EQ    ${closed_won_stage_id}
        Log    Deals that have been won: ${deals}

    *** Keywords ***
    Authorize Hubspot
        ${secrets}=    Get secret    hubspot
        Auth with api key    ${secrets}[API_KEY]

This keyword caches results for future use, to refresh results from
Hupspot, set ``use_cache`` to ``False``.

:param object_type: The object type to be returned and that has
    the ID indicated. Custom objects will be validated against the
    schema.
:param pipeline_id: The numerical pipeline ID or the pipeline
    label visibal in the HubSpot UI (case sensitive).
:param label_as_key: (Optional) Defaults to ``True``. Setting this
    to ``False`` will cause the returned dictionary to key off of ``id``
    instead of ``label``.
:param use_cache: (Optional) Setting this to ``False`` will force
    the system to recache the pipelines from Hubspot.

:return: A dictionary representing the pipeline stages and associated
    data.</doc>
<shortdoc>Returns a dictionary representing the stages available in the requested pipeline. Only pipelines for ``object_type`` are searched using the ``pipeline_id`` as the label or Hubspot API identifier code.</shortdoc>
</kw>
<kw name="Get User" lineno="2168">
<arguments repr="user_id: str = , user_email: str = ">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_id: str = ">
<name>user_id</name>
<type typedoc="string">str</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_email: str = ">
<name>user_email</name>
<type typedoc="string">str</type>
<default/>
</arg>
</arguments>
<doc>Returns a dictionary with the keys ``id`` and ``email`` based on the
provided ``user_id`` or ``user_email``. If both are provided, this
keyword will prefer the ``user_id``.

.. note:: This keyword searches system users, not the CRM
    owners database.</doc>
<shortdoc>Returns a dictionary with the keys ``id`` and ``email`` based on the provided ``user_id`` or ``user_email``. If both are provided, this keyword will prefer the ``user_id``.</shortdoc>
</kw>
<kw name="List Associations" lineno="1380">
<arguments repr="object_type: str, object_id: str | List[str], to_object_type: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_id: str | List[str]">
<name>object_id</name>
<type typedoc="string">str</type>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="to_object_type: str">
<name>to_object_type</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>List associations of an object by type, you must define the ``object_type``
with its ``object_id``. You must also provide the associated objects with
``to_object_type``. The API will return a list of dictionaries with
the associated object ``id`` and association ``type`` (e.g.,
``contact_to_company``).

You may provide a list of object IDs, if you do, the return object is a
dictionary where the keys are the requested IDs and the value associated
to each key is a list of associated objects (like a single search).

:param object_type: The type of object for the object ID
    provided, e.g. ``contact``.
:param object_id: The HubSpot ID for the object of type ``object_type``.
    If you provide a list of object_ids, they will be searched via the
    batch read API.
:param to_object_type: The type of object associations to return.

:return: A list of dictionaries representing the associated objects.
    The associated objects are returned as ``AssociatedId`` objects.</doc>
<shortdoc>List associations of an object by type, you must define the ``object_type`` with its ``object_id``. You must also provide the associated objects with ``to_object_type``. The API will return a list of dictionaries with the associated object ``id`` and association ``type`` (e.g., ``contact_to_company``).</shortdoc>
</kw>
<kw name="List Pipelines" lineno="1948">
<arguments repr="object_type: str, archived: bool = False, use_cache: bool = True">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="archived: bool = False">
<name>archived</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="use_cache: bool = True">
<name>use_cache</name>
<type typedoc="boolean">bool</type>
<default>True</default>
</arg>
</arguments>
<doc>Returns a list of all pipelines configured in Hubspot for the
provided ``object_type``. By default only active, unarchived pipelines
are returned.

This keyword caches results for future use, to refresh results from
Hupspot, set ``use_cache`` to ``False``.

:param object_type: The object type to be returned and that has
    the ID indicated. Custom objects will be validated against the
    schema.
:param archived: (Optional) Setting this to ``True`` will return
    archived pipelines as well.
:param use_cache: (Optional) Setting this to ``False`` will force
    the system to recache the pipelines from Hubspot.

:return: A list of ``Pipeline`` objects representing the pipelines
    associated with the provided ``object_type``.</doc>
<shortdoc>Returns a list of all pipelines configured in Hubspot for the provided ``object_type``. By default only active, unarchived pipelines are returned.</shortdoc>
</kw>
<kw name="Search For Objects" lineno="1079">
<arguments repr="object_type: str, *natural_search, search: List[Dict] | None = None, string_query: str = , properties: List[str] | str | None = None, max_results: int = 1000">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="VAR_POSITIONAL" required="false" repr="*natural_search">
<name>natural_search</name>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="search: List[Dict] | None = None">
<name>search</name>
<type typedoc="list">List[Dict]</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="string_query: str = ">
<name>string_query</name>
<type typedoc="string">str</type>
<default/>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="properties: List[str] | str | None = None">
<name>properties</name>
<type typedoc="list">List[str]</type>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="NAMED_ONLY" required="false" repr="max_results: int = 1000">
<name>max_results</name>
<type typedoc="integer">int</type>
<default>1000</default>
</arg>
</arguments>
<doc>Returns a list of objects of the specified ``type`` based on the
provided ``search`` criteria. The following types are supported:

- COMPANIES
- CONTACTS
- DEALS
- FEEDBACK SUBMISSIONS
- PRODUCTS
- TICKETS
- LINE ITEMS
- QUOTES
- Custom objects, which can be provided as the name of the
  object or the custom object ID in Hubspot.

Returns no more than ``max_results`` which defaults to 1,000 records.
Provide 0 for all results.

By default, search criteria can be passed as additional unlabeled
arguments to the keyword. They must be provided in order:
``property_name``, ``operator``, ``value``. Boolean operators ``AND`` and
``OR`` can be used, but if both are used, groups of criteria combined
with ``AND`` will be combined first, with each of those groups being
combined with ``OR`` second. You can only define a maximum of three
groups of filters combined with ``OR`` and each of those groups can
have no more than three filters combined with ``AND``.

You can use the following operators in your search:

+---------------------+-------------------------------------------+
| OPERATOR            | DESCRIPTION                               |
+=====================+===========================================+
| LT                  | Less than                                 |
+---------------------+-------------------------------------------+
| LTE                 | Less than or equal to                     |
+---------------------+-------------------------------------------+
| GT                  | Greater than                              |
+---------------------+-------------------------------------------+
| GTE                 | Greater than or equal to                  |
+---------------------+-------------------------------------------+
| EQ                  | Equal to                                  |
+---------------------+-------------------------------------------+
| NEQ                 | Not equal to                              |
+---------------------+-------------------------------------------+
| BETWEEN             | Within the specified range                |
+---------------------+-------------------------------------------+
| IN                  | Included within the specified list        |
+---------------------+-------------------------------------------+
| NOT_IN              | Not included within the specified list    |
+---------------------+-------------------------------------------+
| HAS_PROPERTY        | Has a value for the specified property.   |
|                     | When using this operator, or its opposite |
|                     | below, you cannot provide a value.        |
+---------------------+-------------------------------------------+
| NOT_HAS_PROPERTY    | Doesn't have a value for the specified    |
|                     | property.                                 |
+---------------------+-------------------------------------------+
| CONTAINS_TOKEN      | Contains a token.                         |
+---------------------+-------------------------------------------+
| NOT_CONTAINS_TOKEN  | Doesn't contain a token.                  |
+---------------------+-------------------------------------------+

Example search:

.. code-block:: robotframework

    *** Settings ***
    Library         RPA.Hubspot
    Library         RPA.Robocorp.Vault
    Task Setup      Authorize Hubspot

    *** Tasks ***
    Obtain contacts with search
        ${contacts}=    Search for objects    CONTACTS
        ...    firstname    EQ    Alice    AND    lastname    NEQ    Smith
        ...    OR    enum1    HAS_PROPERTY
        ${message}=    Catenate    These contacts will have the first name "Alice" but not the last name "Smith",
        ...    or they will have a value in the proeprty "enum1": ${contacts}
        Log    ${message}

    *** Keywords ***
    Authorize Hubspot
        ${secrets}=    Get secret    hubspot
        Auth with api key    ${secrets}[API_KEY]

Object Searching
================

Alternatively, search criteria can be passed as a list of
dictionaries to the label-only parameter ``search``.

To include multiple filter criteria, you can group filters within
``filterGroups``:

- When multiple ``filters`` are present within a ``filterGroup``, they'll
  be combined using a logical AND operator.
- When multiple ``filterGroups`` are included in the request body,
  they'll be combined using a logical OR operator.

You can include a maximum of three filterGroups with up to three
filters in each group.

.. code-block:: python

    from RPA.Hubspot import Hubspot
    from RPA.Robocorp.Vault import RobocorpVault

    vault = RobocorpVault()
    secrets = vault.get_secret("hubspot")

    hs = Hubspot(secrets["API_KEY"])

    combination_search = [
        {
            "filters": [
                {
                    "propertyName": "firstname",
                    "operator": "EQ",
                    "value": "Alice",
                },
                {
                    "propertyName": "lastname",
                    "operator": "NEQ",
                    "value": "Smith",
                },
            ]
        },
        {"filters": [{"propertyName": "enum1", "operator": "HAS_PROPERTY"}]},
    ]
    contacts = hs.search_for_objects("CONTACTS", search=combination_search)
    print(
        "These contacts will have the first name 'Alice' but not the "
        + "last name 'Smith', or they will have a value in the "
        + f"property 'enum1': {contacts}"
    )

===============================
Controlling Returned Properties
===============================

You can retrieve additional properties for the objects by defining
them with ``properties``. Properties must be provided as a single
property as a string, or a list of properties as a list. If a
requested property does not exist, it will be ignored.

==================
Using Associations
==================

Associated objects can be used as search criteria by using the
pseudo-property ``associations.{object_type}``, where ``{object_type}``
is a valid object type, such as ``contact``, but this is not
supported when seaching custom objects.

=======================
Text-based Search Query
=======================

If you want to search all text-based fields with a simple string,
it can be provided via the optional label-only parameter
``string_query``. This cannot be used at the same time with
``search_object`` or ``natural_search`` parameters.

:param natural_search: all additional unlabeled parameters will
    be parsed as a natural language search.
:param search: the search object to use as search criteria.
:param string_query: a string query can be provided instead of a
    search object which is used as a text-based search in all default
    searchable properties in Hubspot.
:param properties: a list of strings representing return properties
    to be included in the returned data.

:return: A list of found HubSpot objects of type ``SimplePublicObject``.</doc>
<shortdoc>Returns a list of objects of the specified ``type`` based on the provided ``search`` criteria. The following types are supported:</shortdoc>
</kw>
<kw name="Set Association" lineno="1420">
<arguments repr="object_type: str, object_id: str, to_object_type: str, to_object_id: str, association_type: str = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_id: str">
<name>object_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="to_object_type: str">
<name>to_object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="to_object_id: str">
<name>to_object_id</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="association_type: str = None">
<name>association_type</name>
<type typedoc="string">str</type>
<default>None</default>
</arg>
</arguments>
<doc>Sets an association between two Hubspot objects. You must define
the primary ``object_type`` and it's Hubspot ``object_id``, as well
as the Hubspot object it is to be associated with by using the
``to_object_type`` and ``to_object_id``. You may also define the
``association_type``, but if not, one will be inferred based
on the provided object types, for example, if ``object_type`` is
``company`` and ``to_object_type`` is ``contact``, the inferred
``association_type`` will be ``company_to_contact``.

Returns the object with it's associations.

:param object_type: The type of object for the object ID
    provided, e.g. ``contact``.
:param object_id: The HubSpot ID for the object of type ``object_type``.
:param to_object_type: The type of object to associate the ``object_id``
    to.
:param to_object_id: The HubSpot ID for the object to associate the
    ``object_id`` to.

:return: The object represented by the ``object_id`` with the
    new association. The associations will be available on the
    returned object's ``associations`` property.</doc>
<shortdoc>Sets an association between two Hubspot objects. You must define the primary ``object_type`` and it's Hubspot ``object_id``, as well as the Hubspot object it is to be associated with by using the ``to_object_type`` and ``to_object_id``. You may also define the ``association_type``, but if not, one will be inferred based on the provided object types, for example, if ``object_type`` is ``company`` and ``to_object_type`` is ``contact``, the inferred ``association_type`` will be ``company_to_contact``.</shortdoc>
</kw>
<kw name="Set Current Batch Input" lineno="1768">
<arguments repr="batch_input: BatchInputFactory">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="batch_input: BatchInputFactory">
<name>batch_input</name>
<type>BatchInputFactory</type>
</arg>
</arguments>
<doc>Sets the current batch input to the provided one.

See `Batch Inputs`` for complete information on using the batch
input API.

:param batch_input: A batch object such as one returned from
    the \`Get current batch\` keyword.</doc>
<shortdoc>Sets the current batch input to the provided one.</shortdoc>
</kw>
<kw name="Update Object" lineno="1639">
<arguments repr="object_type: str, object_id: str | List[str], id_property: str | None = None, **properties">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_type: str">
<name>object_type</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="object_id: str | List[str]">
<name>object_id</name>
<type typedoc="string">str</type>
<type typedoc="list">List[str]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="id_property: str | None = None">
<name>id_property</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="VAR_NAMED" required="false" repr="**properties">
<name>properties</name>
</arg>
</arguments>
<doc>Performs a partial update of an Object identified by
``object_type`` and ``object_id`` with the provided properties
in Hubspot. The objects can be found using an
alternate ID by providing the name of that HubSpot property
which contains the unique identifier to ``id_property``. The ``object_type``
parameter automatically looks up custom object IDs based on the
provided name.

The Hubspot properties to be updated must be provided as additional
labeled paremeters to this keyword.

Returns the newly created object. The new object's ``id`` is available
via the property ``id``.

:param object_type: The object type to be created.
:param object_id: The HubSpot ID of the object to be updated
:param properties: All remaining labeled parameters passed into
    this keyword will be used as the properties of the new
    object. Read-only or nonexistent properties will be ignored.</doc>
<shortdoc>Performs a partial update of an Object identified by ``object_type`` and ``object_id`` with the provided properties in Hubspot. The objects can be found using an alternate ID by providing the name of that HubSpot property which contains the unique identifier to ``id_property``. The ``object_type`` parameter automatically looks up custom object IDs based on the provided name.</shortdoc>
</kw>
</keywords>
<datatypes>
<enums>
<enum name="BatchMode">
<doc>Enumeration that returns the appropriate class to create a single
object inside of a batch input list.</doc>
<members>
<member name="UPDATE" value="UPDATE"/>
<member name="CREATE" value="CREATE"/>
<member name="INVALID" value="INVALID"/>
</members>
</enum>
</enums>
</datatypes>
<typedocs>
<type name="BatchMode" type="Enum">
<doc>Enumeration that returns the appropriate class to create a single
object inside of a batch input list.</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Create New Batch</usage>
</usages>
<members>
<member name="UPDATE" value="UPDATE"/>
<member name="CREATE" value="CREATE"/>
<member name="INVALID" value="INVALID"/>
</members>
</type>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Get Current Stage Of Object</usage>
<usage>Get Pipeline</usage>
<usage>Get Pipeline Stages</usage>
<usage>List Pipelines</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#dict|dictionary]
literals. They are converted to actual dictionaries using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
dictionaries and other containers.

Examples: ``{'a': 1, 'b': 2}``, ``{'key': 1, 'nested': {'key': 2}}``
</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>Get Owner Of Object</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Search For Objects</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Extend Batch With Inputs</usage>
<usage>Get Object</usage>
<usage>List Associations</usage>
<usage>Search For Objects</usage>
<usage>Update Object</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Input To Batch</usage>
<usage>Extend Batch With Inputs</usage>
<usage>Get Current Stage Of Object</usage>
<usage>Get Object</usage>
<usage>Get Owner Of Object</usage>
<usage>Search For Objects</usage>
<usage>Update Object</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Add Input To Batch</usage>
<usage>Auth With Api Key</usage>
<usage>Auth With Token</usage>
<usage>Create New Batch</usage>
<usage>Get Current Stage Of Object</usage>
<usage>Get Object</usage>
<usage>Get Owner By Id</usage>
<usage>Get Owner Of Object</usage>
<usage>Get Pipeline</usage>
<usage>Get Pipeline Stages</usage>
<usage>Get User</usage>
<usage>List Associations</usage>
<usage>List Pipelines</usage>
<usage>Search For Objects</usage>
<usage>Set Association</usage>
<usage>Update Object</usage>
</usages>
</type>
</typedocs>
</keywordspec>
