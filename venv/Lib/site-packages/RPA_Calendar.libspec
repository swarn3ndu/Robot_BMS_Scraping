<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.Calendar" type="LIBRARY" format="REST" scope="GLOBAL" generated="2023-03-15T12:04:04Z" specversion="4" source="./RPA/Calendar.py" lineno="24">
<version/>
<doc>Library for handling different operations for date and time
handling especially in business days and holiday contexts.

Utilizing  `pendulum &lt;https://pypi.org/project/pendulum/&gt;`_ and
`holidays &lt;https://pypi.org/project/holidays/&gt;`_ packages.

Library is by default using days from Monday to Friday as business
days, but that can be changed by giving list of weekdays to
``Set Business Days`` keyword. A weekday is given as a integer, the
0 for Sunday and 6 for Saturday.

Common country holidays are respected when getting next and previous
business days, but custom holidays can be added into consideration
using keyword ``Add Custom Holidays`` keyword.

Some dates containing for example month names are in English (en), but
the locale of the library can be changed with keyword ``Set Locale`` or
for specific keyword if that has a ``locale`` parameter.</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Add Custom Holidays" lineno="91">
<arguments repr="days: str | date | DateTime | List[str | date | DateTime]">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="days: str | date | DateTime | List[str | date | DateTime]">
<name>days</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
<type typedoc="list">List[str | date | DateTime]</type>
</arg>
</arguments>
<doc>Add a day or list of days which are considered as holidays
in addition to country specific holidays when calculating

:param days: string or list of dates to consider as holidays
:return: list of current custom holidays

Python example.

.. code-block:: python

    library = Calendar()
    custom_holidays = library.add_custom_holidays("2023-03-08")
    # custom_holidays == ["2023-03-08"]
    custom_holidays = library.add_custom_holidays([
        "2023-03-09", "2023-03-10"
    ])
    # custom_holidays == ["2023-03-08", "2023-03-09", "2023-03-10"]

Robot Framework example.

.. code-block:: robotframework

    @{custom_holidays}=   Add Custom Holidays   2023-03-08
    # ${custom_holidays} == ["2023-03-08"]
    @{more_holidays}=   Create List   2023-03-09   2023-03-10
    @{custom_holidays}=   Add Custom Holidays   ${more_holidays}
    # ${custom_holidays} == ["2023-03-08", "2023-03-09", "2023-03-10"]</doc>
<shortdoc>Add a day or list of days which are considered as holidays in addition to country specific holidays when calculating</shortdoc>
</kw>
<kw name="Compare Times" lineno="860">
<arguments repr="time1: str | date | DateTime, time2: str | date | DateTime">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="time1: str | date | DateTime">
<name>time1</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="time2: str | date | DateTime">
<name>time2</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
</arguments>
<doc>Compares given times and returns `True` if `time2`
is more recent than `time1`.

:param time1: first time for comparison
:param time2: second time for comparison
:return: `True` if `time2` is more recent than `time1`

Python example.

.. code-block:: python

    recent = Calendar().compare_times("2023-03-09 13:02", "2023-03-09 13:47")
    if recent:
        print("2023-03-09 13:47 is more recent")

Robot Framework example.

.. code-block:: robotframework

    ${recent}=  Compare Times   2023-03-09 13:02   2023-03-09 13:47
    IF  ${recent}
        Log  2023-03-09 13:47 is more recent
    END</doc>
<shortdoc>Compares given times and returns `True` if `time2` is more recent than `time1`.</shortdoc>
</kw>
<kw name="Compare Times ${time1} &lt; ${time2}" lineno="818">
<arguments repr="">
</arguments>
<doc>Compares given times and returns `True` if `time2`
is more recent than `time1`.

:param time1: first time for comparison
:param time2: second time for comparison
:return: `True` if `time2` is more recent than `time1`

Robot Framework example.

.. code-block:: robotframework

    ${recent}=  Compare Times 2023-03-09 15:50 &lt; 2023-03-09 15:59
    IF  ${recent}
        Log  2023-03-09 15:59 is more recent
    END</doc>
<shortdoc>Compares given times and returns `True` if `time2` is more recent than `time1`.</shortdoc>
</kw>
<kw name="Compare Times ${time1} &gt; ${time2}" lineno="839">
<arguments repr="">
</arguments>
<doc>Compares given times and returns `True` if `time1`
is more recent than `time2`.

:param time1: first time for comparison
:param time2: second time for comparison
:return: `True` if `time1` is more recent than `time2`

Robot Framework example.

.. code-block:: robotframework

    ${recent}=  Compare Times 2023-03-09 15:59 &gt; 2023-03-09 15:58
    IF  ${recent}
        Log  2023-03-09 15:59 is more recent
    END</doc>
<shortdoc>Compares given times and returns `True` if `time1` is more recent than `time2`.</shortdoc>
</kw>
<kw name="Create Time" lineno="238">
<arguments repr="date_string: str, date_format_in: str | None = None, timezone: str | None = None, date_format_out: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date_string: str">
<name>date_string</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="date_format_in: str | None = None">
<name>date_format_in</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timezone: str | None = None">
<name>timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="date_format_out: str | None = None">
<name>date_format_out</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>This keyword tries to construct valid calendar
instance from given date string and its expected date
format.

See https://pendulum.eustace.io/docs/#tokens for
valid tokens for the date format. Tokens are
used to form correct date and time format.

:param date_string: for example. "22 May 19"
:param date_format_in: for example. "DD MMM YY"
:param timezone: default timezone is "UTC"
:param date_format_out: for example. "DD-MM-YY"
:return: set datetime as an object or string
 if `date_format_out` has been set

Python example.

.. code-block:: python

    date = Calendar().create_time(
        "22 May 19",
        "DD MMM YY"
    )

Robot Framework example.

.. code-block:: robotframework

    ${date}=  Create Time
    ...  22 May 19
    ...  DD MMM YY</doc>
<shortdoc>This keyword tries to construct valid calendar instance from given date string and its expected date format.</shortdoc>
</kw>
<kw name="First Business Day Of The Month" lineno="669">
<arguments repr="date: str | date | DateTime, country: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return first business day of the month.

If `country` is not given then holidays are not considered.

:param date: date describing the month
:param country: country code, default `None`
:return: first business of the month

Python example.

.. code-block:: python

    first_day = Calendar().first_business_day_of_the_month("2024-06-01")
    # first_day == "2024-06-03"

Robot Framework example.

.. code-block:: robotframework

    ${first_day}=  First Business Day of the Month  2024-06-01
    # ${first_day} == "2024-06-03"</doc>
<shortdoc>Return first business day of the month.</shortdoc>
</kw>
<kw name="Get Iso Calendar" lineno="890">
<arguments repr="date: str | date | DateTime">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
</arguments>
<doc>Get ISO calendar information for the given date.

:parameter date: input date
:return: ISO calendar object containing year, week number and weekday.

Python example.

.. code-block:: python

    iso_cal = Calendar().get_iso_calendar("2023-03-09")
    print(iso_cal.year)
    print(iso_cal.week)
    print(iso_cal.weekday)

Robot Framework example.

.. code-block:: robotframework

    ${iso_cal}=  Get ISO Calendar  2023-03-09
    ${iso_year}=  Set Variable  ${iso_cal.year}
    ${iso_week}=  Set Variable  ${iso_cal.week}
    ${iso_weekday}=  Set Variable  ${iso_cal.weekday}</doc>
<shortdoc>Get ISO calendar information for the given date.</shortdoc>
</kw>
<kw name="Is the ${date} Business Day in ${country}" lineno="971">
<arguments repr="">
</arguments>
<doc>Is the date a business day in a country.

:param date_in: input date
:param country: country code
:return: `True` if the day is a business day, `False` if not

Robot Framework example.

.. code-block:: robotframework

    ${is_business_day}=   Is the 2023-01-02 business day in FI
    IF   ${is_business_day}
        Log To Console   It is time for the work
    ELSE
        Log To Console   It is time to relax
    END</doc>
<shortdoc>Is the date a business day in a country.</shortdoc>
</kw>
<kw name="Is the ${date} Holiday in ${country}" lineno="1030">
<arguments repr="">
</arguments>
<doc>Is the date a holiday in a country.

:param date_in: input date
:param country: country code
:return: `True` if the day is a holiday, `False` if not

Robot Framework example.

.. code-block:: robotframework

    ${is_it}=   Is the 2022-12-26 holiday in FI
    IF   ${is_holiday}
        Log  Time to relax
    ELSE
        Log  Time for the work
    END</doc>
<shortdoc>Is the date a holiday in a country.</shortdoc>
</kw>
<kw name="Is The Date Business Day" lineno="921">
<arguments repr="date: str | date | DateTime, country: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Is the date a business day in a country.

If `country` is not given then holidays are not considered.

:param date: input date
:param country: country code, default `None`
:return: `True` if the day is a business day, `False` if not

Python example.

.. code-block:: python

    for day in range(1,32):
        date = f"2023-1-{day}"
        is_business_day = Calendar().is_the_date_business_day(date, "FI")
        if is_business_day:
            print(f'It is time for the work on {date}')
        else:
            print(f'It is time to relax on {date}')

Robot Framework example.

.. code-block:: robotframework

    FOR  ${day}  IN RANGE  1  32
        ${date}=   Set Variable   2023-1-${day}
        ${is_business_day}=   Is the date business day  ${date}  FI
        IF   ${is_business_day}
            Log To Console   It is time for the work on ${date}
        ELSE
            Log To Console   It is time to relax on ${date}
        END
    END</doc>
<shortdoc>Is the date a business day in a country.</shortdoc>
</kw>
<kw name="Is The Date Holiday" lineno="992">
<arguments repr="date: str | date | DateTime, country: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Is the date a holiday in a country.
If `country` is not given then checks only if date is in custom holiday list.

:param date_in: input date
:param country: country code, default `None`
:return: `True` if the day is a holiday, `False` if not

Python example.

.. code-block:: python

    is_holiday = Calendar().is_the_date_holiday("2022-12-26", "FI")
    if is_holiday:
        print('Time to relax')
    else:
        print('Time for the work')

Robot Framework example.

.. code-block:: robotframework

    ${is_holiday}=   Is the date holiday   2022-12-26   FI
    IF   ${is_holiday}
        Log  Time to relax
    ELSE
        Log  Time for the work
    END</doc>
<shortdoc>Is the date a holiday in a country. If `country` is not given then checks only if date is in custom holiday list.</shortdoc>
</kw>
<kw name="Last Business Day Of The Month" lineno="713">
<arguments repr="date: str | date | DateTime, country: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return last business day of the month.

If `country` is not given then holidays are not considered.

:param date: date describing the month
:param country: country code, default `None`
:return: last business day of the month

Python example.

.. code-block:: python

    last_day = Calendar().last_business_day_of_the_month("2023-12-01")
    # last_day == "2023-12-29"

Robot Framework example.

.. code-block:: robotframework

    ${last_day}=  Last Business Day of the Month  2023-12-01
    # ${last_day} == "2023-12-29"</doc>
<shortdoc>Return last business day of the month.</shortdoc>
</kw>
<kw name="Reset Custom Holidays" lineno="86">
<arguments repr="">
</arguments>
<doc>Reset custom holiday list into empty list.</doc>
<shortdoc>Reset custom holiday list into empty list.</shortdoc>
</kw>
<kw name="Return Holidays" lineno="630">
<arguments repr="years: int | List[int], country: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="years: int | List[int]">
<name>years</name>
<type typedoc="integer">int</type>
<type typedoc="list">List[int]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return holidays for a country. If country is not given
then only custom holidays are returned.

:param years: single year or list of years to list holidays for
:param country: country code, default `None`
:return: holidays in a dictionary, the key is the date and the
 value is name of the holiday

Python example.

.. code-block:: python

    holidays = Calendar().return_holidays(2023, "FI")
    for date, holiday_name in holidays.items():
        print(f"{date} is {holiday_name}")

Robot Framework example.

.. code-block:: robotframework

    &amp;{holidays}=  Return Holidays  2023  FI
    FOR  ${date}  IN   @{holidays.keys()}
        Log To Console   ${date} is ${holidays}[${date}]
    END</doc>
<shortdoc>Return holidays for a country. If country is not given then only custom holidays are returned.</shortdoc>
</kw>
<kw name="Return Next Business Day" lineno="566">
<arguments repr="date: str | date | DateTime, country: str | None = None, return_format: str = YYYY-MM-DD, locale: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="return_format: str = YYYY-MM-DD">
<name>return_format</name>
<type typedoc="string">str</type>
<default>YYYY-MM-DD</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locale: str | None = None">
<name>locale</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return the next business day.

:param date: day of origin
:param country: country code, default `None`
:param return_format: dates can be formatted for the resulting
 list, defaults to "YYYY-MM-DD"
:param locale: name of the locale
:return: the next business day from day of origin

Python example.

.. code-block:: python

    next_business = Calendar().return_next_business_day("2023-01-05", "FI")
    # next_business == "2023-01-09"

Robot Framework example.

.. code-block:: robotframework

    ${next_business}=  Return Next Business Day  2023-01-05  FI
    # ${next_business} == "2023-01-09"</doc>
<shortdoc>Return the next business day.</shortdoc>
</kw>
<kw name="Return Previous Business Day" lineno="533">
<arguments repr="date: str | date | DateTime, country: str | None = None, return_format: str = YYYY-MM-DD, locale: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="date: str | date | DateTime">
<name>date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="country: str | None = None">
<name>country</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="return_format: str = YYYY-MM-DD">
<name>return_format</name>
<type typedoc="string">str</type>
<default>YYYY-MM-DD</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="locale: str | None = None">
<name>locale</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return the previous business day.

:param date: day of origin
:param country: country code, default `None`
:param return_format: dates can be formatted for the resulting
 list, defaults to "YYYY-MM-DD"
:param locale: name of the locale
:return: the previous business day from day of origin

Python example.

.. code-block:: python

    prev_business = Calendar().return_previous_business_day("2023-01-09", "FI")
    # prev == "2023-01-05"

Robot Framework example.

.. code-block:: robotframework

    ${previous_business}=  Return Previous Business Day  2023-01-09  FI
    # ${previous_business} == "2023-01-05"</doc>
<shortdoc>Return the previous business day.</shortdoc>
</kw>
<kw name="Set Business Days" lineno="128">
<arguments repr="days: List[int]">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="days: List[int]">
<name>days</name>
<type typedoc="list">List[int]</type>
</arg>
</arguments>
<doc>Set weekdays which are considered as business days
for calculating previous and next business day.

:param days: list of integers denoting weekdays
:return: previous list of weekdays

Python example.

.. code-block:: python

    # set 4 day work week
    previous = Calendar().set_business_days([1,2,3,4])
    # previous == [1,2,3,4,5]

Robot Framework example.

.. code-block:: robotframework

    @{4days}=   Create List   1  2  3  4
    @{previous}=    Set Business Days  ${days}
    # ${previous} == [1,2,3,4,5]</doc>
<shortdoc>Set weekdays which are considered as business days for calculating previous and next business day.</shortdoc>
</kw>
<kw name="Set Locale" lineno="51">
<arguments repr="locale_name: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="locale_name: str">
<name>locale_name</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Set locale globally for the library

:param locale_name: name of the locale
:return: name of the previous locale

Python example.

.. code-block:: python

    library = Calendar()
    library.set_locale("es")
    now = library.time_now(return_format="dddd DD MMMM YYYY")
    # now == "jueves 09 marzo 2023"
    library.set_locale("en")
    now = library.time_now(return_format="dddd DD MMMM YYYY")
    # now == "Thursday 09 March 2023"

Robot Framework example.

.. code-block:: robotframework

    Set Locale   es
    ${now}=  Time Now  return_format=dddd DD MMMM YYYY
    # ${now} == "jueves 09 marzo 2023"
    Set Locale   en
    ${now}=  Time Now  return_format=dddd DD MMMM YYYY
    # ${now} == "Thursday 09 March 2023"</doc>
<shortdoc>Set locale globally for the library</shortdoc>
</kw>
<kw name="Sort List Of Dates" lineno="766">
<arguments repr="dates: List[str | date | DateTime], return_format: str | None = None, reverse: bool = False">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="dates: List[str | date | DateTime]">
<name>dates</name>
<type typedoc="list">List[str | date | DateTime]</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="return_format: str | None = None">
<name>return_format</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="reverse: bool = False">
<name>reverse</name>
<type typedoc="boolean">bool</type>
<default>False</default>
</arg>
</arguments>
<doc>Sort list of dates.

:param dates: list of dates to sort
:param return_format: dates can be formatted for the resulting
 list
:param reverse: `True` return latest to oldest, defaults to `False`,
 which means order from oldest to latest
:return: list of sorted dates

Python example.

.. code-block:: python

    datelist = [
        "2023-07-02 12:02:31",
        "2023-07-03 12:02:35",
        "2023-07-03 12:02:31"
    ]
    sorted = Calendar().sort_list_of_dates(datelist)
    # sorted[0] == "2023-07-03 12:02:35"
    # sorted[-1] == "2023-07-02 12:02:31"
    sorted = Calendar().sort_list_of_dates(datelist, reverse=True)
    # sorted[0] == "2023-07-02 12:02:31"
    # sorted[-1] == "2023-07-03 12:02:35"

Robot Framework example.

.. code-block:: robotframework

    @{datelist}=  Create List
    ...   2023-07-02 12:02:31
    ...   2023-07-03 12:02:35
    ...   2023-07-03 12:02:31
    ${sorted}=  Sort List Of Dates   ${datelist}
    # ${sorted}[0] == "2023-07-03 12:02:35"
    # ${sorted}[-1] == "2023-07-02 12:02:31"
    ${sorted}=  Sort List Of Dates   ${datelist}  reverse=True
    # ${sorted}[0] == "2023-07-02 12:02:31"
    # ${sorted}[-1] == "2023-07-03 12:02:35"</doc>
<shortdoc>Sort list of dates.</shortdoc>
</kw>
<kw name="Time Difference" lineno="157">
<arguments repr="start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_date: str | date | DateTime">
<name>start_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_date: str | date | DateTime">
<name>end_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="start_timezone: str | None = None">
<name>start_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="end_timezone: str | None = None">
<name>end_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Compare 2 dates and get the time difference.

Returned dictionary contains following properties:

    - end_date_is_later, `True` if end_date is more recent
      than start_date, otherwise `False`
    - years, time difference in years
    - months, time difference in months
    - days, time difference in days
    - hours, time difference in hours (in addition to the days)
    - minutes, time difference in minutes (in addition to the hours)
    - seconds, time difference in seconds (in addition to the minutes)

:param start_date: starting date for the comparison
:param end_date: ending date for the comparison
:param start_timezone: timezone for the starting date, defaults to None
:param end_timezone: timezone for the ending date, defaults to None
:return: dictionary containing comparison result

Python example.

.. code-block:: python

    diff = Calendar().time_difference(
        "1975-05-22T18:00:00",
        "1975-05-22T22:45:30"
    )
    # diff['end_date_is_later'] == True
    # diff['days'] == 0
    # diff['hours'] == 4
    # diff['minutes'] == 45
    # diff['seconds'] == 30

Robot Framework example.

.. code-block:: robotframework

    &amp;{diff}=    Time Difference  1975-05-22T18:00:00  1975-05-22T22:45:30
    # ${diff}[end_date_is_later] == True
    # ${diff}[days] == 0
    # ${diff}[hours] == 4
    # ${diff}[minutes] == 45
    # ${diff}[seconds] == 30</doc>
<shortdoc>Compare 2 dates and get the time difference.</shortdoc>
</kw>
<kw name="Time Difference Between Timezones" lineno="497">
<arguments repr="start_timezone: str, end_timezone: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_timezone: str">
<name>start_timezone</name>
<type typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_timezone: str">
<name>end_timezone</name>
<type typedoc="string">str</type>
</arg>
</arguments>
<doc>Return the hour difference between timezones.

:param start_timezone: first timezone
:param end_timezone: second timezone
:return: hour difference between the timezones

Python example.

.. code-block:: python

    diff = Calendar().time_difference_between_timezones(
        "America/New_York",
        "Europe/Helsinki"
    )
    # diff == 7

Robot Framework example.

.. code-block:: robotframework

    ${diff}=  Time Difference Between Timezones
    ...  America/New_York
    ...  Europe/Helsinki
    # ${diff} == 7</doc>
<shortdoc>Return the hour difference between timezones.</shortdoc>
</kw>
<kw name="Time Difference In Days" lineno="372">
<arguments repr="start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_date: str | date | DateTime">
<name>start_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_date: str | date | DateTime">
<name>end_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="start_timezone: str | None = None">
<name>start_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="end_timezone: str | None = None">
<name>end_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return the time difference of dates in days.

:param start_date: the start date
:param end_date: the end date
:param start_timezone: timezone for the start date,
 defaults to None
:param end_timezone: timezone for the end date,
 defaults to None
:return: difference in days

Python example.

.. code-block:: python

    diff = Calendar().time_difference_in_days(
        "2023-05-21",
        "2023-05-29"
    )
    # diff == 8

Robot Framework example.

.. code-block:: robotframework

    ${diff}=  Time Difference In Days
    ...  2023-05-21
    ...  2023-05-29
    # ${diff} == 8</doc>
<shortdoc>Return the time difference of dates in days.</shortdoc>
</kw>
<kw name="Time Difference In Hours" lineno="414">
<arguments repr="start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_date: str | date | DateTime">
<name>start_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_date: str | date | DateTime">
<name>end_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="start_timezone: str | None = None">
<name>start_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="end_timezone: str | None = None">
<name>end_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return the time difference of dates in hours.

:param start_date: the start date
:param end_date: the end date
:param start_timezone: timezone for the start date,
 defaults to None
:param end_timezone: timezone for the end date,
 defaults to None
:return: difference in hours

Python example.

.. code-block:: python

    diff = Calendar().time_difference_in_hours(
        "2023-08-21T22:00:00",
        "2023-08-22T04:00:00"
    )
    # diff == 6

Robot Framework example.

.. code-block:: robotframework

    ${diff}=  Time Difference In Hours
    ...  2023-08-21T22:00:00
    ...  2023-08-22T04:00:00
    # ${diff} == 6</doc>
<shortdoc>Return the time difference of dates in hours.</shortdoc>
</kw>
<kw name="Time Difference In Minutes" lineno="456">
<arguments repr="start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_date: str | date | DateTime">
<name>start_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_date: str | date | DateTime">
<name>end_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="start_timezone: str | None = None">
<name>start_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="end_timezone: str | None = None">
<name>end_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return the time difference of dates in minutes.

:param start_date: the start date
:param end_date: the end date
:param start_timezone: timezone for the start date,
 defaults to None
:param end_timezone: timezone for the end date,
 defaults to None
:return: difference in minutes

Python example.

.. code-block:: python

    diff = Calendar().time_difference_in_minutes(
        "12:30",
        "16:35"
    )
    # diff == 245

Robot Framework example.

.. code-block:: robotframework

    ${diff}=  Time Difference In Minutes
    ...  12:30
    ...  16:35
    # ${diff} == 245</doc>
<shortdoc>Return the time difference of dates in minutes.</shortdoc>
</kw>
<kw name="Time Difference In Months" lineno="330">
<arguments repr="start_date: str | date | DateTime, end_date: str | date | DateTime, start_timezone: str | None = None, end_timezone: str | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="start_date: str | date | DateTime">
<name>start_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="end_date: str | date | DateTime">
<name>end_date</name>
<type typedoc="string">str</type>
<type typedoc="date">date</type>
<type typedoc="datetime">DateTime</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="start_timezone: str | None = None">
<name>start_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="end_timezone: str | None = None">
<name>end_timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
</arguments>
<doc>Return time difference of dates in months.

:param start_date: the start date
:param end_date: the end date
:param start_timezone: timezone for the start date,
 defaults to None
:param end_timezone: timezone for the end date,
 defaults to None
:return: difference in months

Python example.

.. code-block:: python

    diff = Calendar().time_difference_in_months(
        "2022-05-21T22:00:00",
        "2023-08-21T22:00:00"
    )
    # diff == 15

Robot Framework example.

.. code-block:: robotframework

    ${diff}=  Time Difference In Months
    ...  2022-05-21T22:00:00
    ...  2023-08-21T22:00:00
    # ${diff} == 15</doc>
<shortdoc>Return time difference of dates in months.</shortdoc>
</kw>
<kw name="Time Now" lineno="288">
<arguments repr="timezone: str | None = None, return_format: str = YYYY-MM-DD">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="timezone: str | None = None">
<name>timezone</name>
<type typedoc="string">str</type>
<type typedoc="None">None</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="return_format: str = YYYY-MM-DD">
<name>return_format</name>
<type typedoc="string">str</type>
<default>YYYY-MM-DD</default>
</arg>
</arguments>
<doc>Return current date and time

:param timezone: optional, for example. "America/Boston"
:param return_format: dates can be formatted for the resulting
 list, defaults to "YYYY-MM-DD"
:return: current datetime as an object

Python example.

.. code-block:: python

    now = Calendar().time_now("Europe/Helsinki")

Robot Framework example.

.. code-block:: robotframework

    ${now}=  Time Now   Europe/Helsinki</doc>
<shortdoc>Return current date and time</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="boolean" type="Standard">
<doc>Strings ``TRUE``, ``YES``, ``ON`` and ``1`` are converted to Boolean ``True``,
the empty string as well as strings ``FALSE``, ``NO``, ``OFF`` and ``0``
are converted to Boolean ``False``, and the string ``NONE`` is converted
to the Python ``None`` object. Other strings and other accepted values are
passed as-is, allowing keywords to handle them specially if
needed. All string comparisons are case-insensitive.

Examples: ``TRUE`` (converted to ``True``), ``off`` (converted to ``False``),
``example`` (used as-is)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>Sort List Of Dates</usage>
</usages>
</type>
<type name="date" type="Standard">
<doc>Strings are expected to be a timestamp in
[https://en.wikipedia.org/wiki/ISO_8601|ISO 8601] like date format
``YYYY-MM-DD``, where any non-digit character can be used as a separator
or separators can be omitted altogether. Possible time components are
only allowed if they are zeros.

Examples: ``2022-02-09``, ``2022-02-09 00:00``
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Add Custom Holidays</usage>
<usage>Compare Times</usage>
<usage>First Business Day Of The Month</usage>
<usage>Get Iso Calendar</usage>
<usage>Is The Date Business Day</usage>
<usage>Is The Date Holiday</usage>
<usage>Last Business Day Of The Month</usage>
<usage>Return Next Business Day</usage>
<usage>Return Previous Business Day</usage>
<usage>Time Difference</usage>
<usage>Time Difference In Days</usage>
<usage>Time Difference In Hours</usage>
<usage>Time Difference In Minutes</usage>
<usage>Time Difference In Months</usage>
</usages>
</type>
<type name="datetime" type="Standard">
<doc>Strings are expected to be a timestamp in
[https://en.wikipedia.org/wiki/ISO_8601|ISO 8601] like
format ``YYYY-MM-DD hh:mm:ss.mmmmmm``, where any non-digit
character can be used as a separator or separators can be
omitted altogether. Additionally, only the date part is
mandatory, all possibly missing time components are considered
to be zeros.

Integers and floats are considered to represent seconds since
the [https://en.wikipedia.org/wiki/Unix_time|Unix epoch].

Examples: ``2022-02-09T16:39:43.632269``, ``2022-02-09 16:39``,
``${1644417583.632269}`` (Epoch time)
</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
</accepts>
<usages>
<usage>Add Custom Holidays</usage>
<usage>Compare Times</usage>
<usage>First Business Day Of The Month</usage>
<usage>Get Iso Calendar</usage>
<usage>Is The Date Business Day</usage>
<usage>Is The Date Holiday</usage>
<usage>Last Business Day Of The Month</usage>
<usage>Return Next Business Day</usage>
<usage>Return Previous Business Day</usage>
<usage>Time Difference</usage>
<usage>Time Difference In Days</usage>
<usage>Time Difference In Hours</usage>
<usage>Time Difference In Minutes</usage>
<usage>Time Difference In Months</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Return Holidays</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Add Custom Holidays</usage>
<usage>Return Holidays</usage>
<usage>Set Business Days</usage>
<usage>Sort List Of Dates</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Create Time</usage>
<usage>First Business Day Of The Month</usage>
<usage>Is The Date Business Day</usage>
<usage>Is The Date Holiday</usage>
<usage>Last Business Day Of The Month</usage>
<usage>Return Holidays</usage>
<usage>Return Next Business Day</usage>
<usage>Return Previous Business Day</usage>
<usage>Sort List Of Dates</usage>
<usage>Time Difference</usage>
<usage>Time Difference In Days</usage>
<usage>Time Difference In Hours</usage>
<usage>Time Difference In Minutes</usage>
<usage>Time Difference In Months</usage>
<usage>Time Now</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Add Custom Holidays</usage>
<usage>Compare Times</usage>
<usage>Create Time</usage>
<usage>First Business Day Of The Month</usage>
<usage>Get Iso Calendar</usage>
<usage>Is The Date Business Day</usage>
<usage>Is The Date Holiday</usage>
<usage>Last Business Day Of The Month</usage>
<usage>Return Holidays</usage>
<usage>Return Next Business Day</usage>
<usage>Return Previous Business Day</usage>
<usage>Set Locale</usage>
<usage>Sort List Of Dates</usage>
<usage>Time Difference</usage>
<usage>Time Difference Between Timezones</usage>
<usage>Time Difference In Days</usage>
<usage>Time Difference In Hours</usage>
<usage>Time Difference In Minutes</usage>
<usage>Time Difference In Months</usage>
<usage>Time Now</usage>
</usages>
</type>
</typedocs>
</keywordspec>
